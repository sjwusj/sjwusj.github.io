{"title":"Android_Day11","uid":"dbaf3da6feb493141336195b06966273","slug":"Android-Day11","date":"2024-04-29T23:56:12.000Z","updated":"2024-04-30T12:13:07.164Z","comments":true,"path":"api/articles/Android-Day11.json","keywords":null,"cover":"image/cover3.jpg","content":"<h1 id=\"带你玩转Kotlin\"><a href=\"#带你玩转Kotlin\" class=\"headerlink\" title=\"带你玩转Kotlin\"></a>带你玩转Kotlin</h1><p>kotlin教程：<a href=\"https://www.runoob.com/kotlin/kotlin-tutorial.html\">https://www.runoob.com/kotlin/kotlin-tutorial.html</a></p>\n<p>在线运行：<a href=\"https://play.kotlinlang.org/\">https://play.kotlinlang.org/</a></p>\n<h2 id=\"课程目标\"><a href=\"#课程目标\" class=\"headerlink\" title=\"课程目标\"></a>课程目标</h2><p>掌握Kotlin，提升Android开发效率和应用健壮性</p>\n<h2 id=\"一、Kotlin是什么\"><a href=\"#一、Kotlin是什么\" class=\"headerlink\" title=\"一、Kotlin是什么\"></a>一、Kotlin是什么</h2><h3 id=\"1-1-Kotlin的前世今生\"><a href=\"#1-1-Kotlin的前世今生\" class=\"headerlink\" title=\"1.1 Kotlin的前世今生\"></a>1.1 Kotlin的前世今生</h3><p><img src=\"/img/image-20240430081848511.png\" alt=\"image-20240430081848511\"></p>\n<p><img src=\"/img/image-20240430082147946.png\" alt=\"image-20240430082147946\"></p>\n<h3 id=\"1-2-为什么要用Kotlin\"><a href=\"#1-2-为什么要用Kotlin\" class=\"headerlink\" title=\"1.2 为什么要用Kotlin\"></a>1.2 为什么要用Kotlin</h3><p><img src=\"/img/image-20240430082435510.png\" alt=\"image-20240430082435510\"></p>\n<h4 id=\"实现饿汉式单例\"><a href=\"#实现饿汉式单例\" class=\"headerlink\" title=\"实现饿汉式单例\"></a>实现饿汉式单例</h4><p><img src=\"/img/image-20240430082542473.png\" alt=\"image-20240430082542473\"></p>\n<h4 id=\"Data-class\"><a href=\"#Data-class\" class=\"headerlink\" title=\"Data class\"></a>Data class</h4><p><img src=\"/img/image-20240430082800515.png\" alt=\"image-20240430082800515\"></p>\n<h4 id=\"Kotlin安全-空指针\"><a href=\"#Kotlin安全-空指针\" class=\"headerlink\" title=\"Kotlin安全-空指针\"></a>Kotlin安全-空指针</h4><p><img src=\"/img/image-20240430082847799.png\" alt=\"image-20240430082847799\"></p>\n<h4 id=\"Kotlin兼容性\"><a href=\"#Kotlin兼容性\" class=\"headerlink\" title=\"Kotlin兼容性\"></a>Kotlin兼容性</h4><p><img src=\"/img/image-20240430083742189.png\" alt=\"image-20240430083742189\"></p>\n<h4 id=\"Kotlin跨端-跨平台\"><a href=\"#Kotlin跨端-跨平台\" class=\"headerlink\" title=\"Kotlin跨端&#x2F;跨平台\"></a>Kotlin跨端&#x2F;跨平台</h4><p><img src=\"/img/image-20240430083907977.png\" alt=\"image-20240430083907977\"></p>\n<h3 id=\"1-3-开发环境介绍\"><a href=\"#1-3-开发环境介绍\" class=\"headerlink\" title=\"1.3 开发环境介绍\"></a>1.3 开发环境介绍</h3><p>IDEA、AndroidStudio（自带）</p>\n<p><img src=\"/img/image-20240430084022416.png\" alt=\"image-20240430084022416\"></p>\n<h3 id=\"1-4-第一个KT程序\"><a href=\"#1-4-第一个KT程序\" class=\"headerlink\" title=\"1.4 第一个KT程序\"></a>1.4 第一个KT程序</h3><p><img src=\"/img/image-20240430084052298.png\" alt=\"image-20240430084052298\"></p>\n<h2 id=\"二、Kotlin变量和类型系统\"><a href=\"#二、Kotlin变量和类型系统\" class=\"headerlink\" title=\"二、Kotlin变量和类型系统\"></a>二、Kotlin变量和类型系统</h2><h3 id=\"2-1-变量定义\"><a href=\"#2-1-变量定义\" class=\"headerlink\" title=\"2.1 变量定义\"></a>2.1 变量定义</h3><p><img src=\"/img/image-20240430084913230.png\" alt=\"image-20240430084913230\"></p>\n<p><img src=\"/img/image-20240430085029153.png\" alt=\"image-20240430085029153\"></p>\n<p><img src=\"/img/image-20240430085058755.png\" alt=\"image-20240430085058755\"></p>\n<h4 id=\"变量和Getter-Setter的区别\"><a href=\"#变量和Getter-Setter的区别\" class=\"headerlink\" title=\"变量和Getter Setter的区别\"></a>变量和Getter Setter的区别</h4><p><img src=\"/img/image-20240430085429027.png\" alt=\"image-20240430085429027\"></p>\n<h3 id=\"2-2-Kotlin数字类型\"><a href=\"#2-2-Kotlin数字类型\" class=\"headerlink\" title=\"2.2 Kotlin数字类型\"></a>2.2 Kotlin数字类型</h3><p>从某种程度上讲，Java的类型系统并不是完全面向对象的，因为它存在原始类型，而原始类型并不属于对象。而Kotlin 则不一样，它从语言设计的层面上就规避了这个问题，类型系统则是完全面向对象的。</p>\n<p><img src=\"/img/image-20240430085638759.png\" alt=\"image-20240430085638759\"></p>\n<h4 id=\"基础类型-数字类型\"><a href=\"#基础类型-数字类型\" class=\"headerlink\" title=\"基础类型-数字类型\"></a>基础类型-数字类型</h4><p><img src=\"/img/image-20240430085706468.png\" alt=\"image-20240430085706468\"></p>\n<p><img src=\"/img/image-20240430085754734.png\" alt=\"image-20240430085754734\"></p>\n<h4 id=\"基础类型-包装类\"><a href=\"#基础类型-包装类\" class=\"headerlink\" title=\"基础类型-包装类\"></a>基础类型-包装类</h4><p><img src=\"/img/image-20240430090009391.png\" alt=\"image-20240430090009391\"></p>\n<p><img src=\"/img/image-20240430085857153.png\" alt=\"image-20240430085857153\"></p>\n<h3 id=\"2-3-Kotlin空安全\"><a href=\"#2-3-Kotlin空安全\" class=\"headerlink\" title=\"2.3 Kotlin空安全\"></a>2.3 Kotlin空安全</h3><p><img src=\"/img/image-20240430085941868.png\" alt=\"image-20240430085941868\"></p>\n<p><img src=\"/img/image-20240430090032646.png\" alt=\"image-20240430090032646\"></p>\n<h3 id=\"2-4-Kotlin类型系统\"><a href=\"#2-4-Kotlin类型系统\" class=\"headerlink\" title=\"2.4 Kotlin类型系统\"></a>2.4 Kotlin类型系统</h3><p>在 Kotlin 当中，Any 是所有类型的父类，我们可以称之为根类型。同时，我们也学过，Kotlin 的类型还分为可空类型和不可空类型。</p>\n<p><img src=\"/img/image-20240430090129979.png\" alt=\"image-20240430090129979\"></p>\n<h3 id=\"2-5-布尔类型\"><a href=\"#2-5-布尔类型\" class=\"headerlink\" title=\"2.5 布尔类型\"></a>2.5 布尔类型</h3><p><img src=\"/img/image-20240430090242792.png\" alt=\"image-20240430090242792\"></p>\n<h3 id=\"2-6-字符\"><a href=\"#2-6-字符\" class=\"headerlink\" title=\"2.6 字符\"></a>2.6 字符</h3><p><img src=\"/img/image-20240430090313883.png\" alt=\"image-20240430090313883\"></p>\n<p><img src=\"/img/image-20240430090340011.png\" alt=\"image-20240430090340011\"></p>\n<h3 id=\"2-7-数组\"><a href=\"#2-7-数组\" class=\"headerlink\" title=\"2.7 数组\"></a>2.7 数组</h3><p><img src=\"/img/image-20240430090632393.png\" alt=\"image-20240430090632393\"></p>\n<h3 id=\"2-8-总结\"><a href=\"#2-8-总结\" class=\"headerlink\" title=\"2.8 总结\"></a>2.8 总结</h3><h2 id=\"三、Kotlin函数和流程控制\"><a href=\"#三、Kotlin函数和流程控制\" class=\"headerlink\" title=\"三、Kotlin函数和流程控制\"></a>三、Kotlin函数和流程控制</h2><h3 id=\"函数-定义\"><a href=\"#函数-定义\" class=\"headerlink\" title=\"函数-定义\"></a>函数-定义</h3><p><img src=\"/img/image-20240430092230689.png\" alt=\"image-20240430092230689\"></p>\n<p><img src=\"/img/image-20240430092308467.png\" alt=\"image-20240430092308467\"></p>\n<h3 id=\"函数-调用\"><a href=\"#函数-调用\" class=\"headerlink\" title=\"函数-调用\"></a>函数-调用</h3><p><img src=\"/img/image-20240430092424428.png\" alt=\"image-20240430092424428\"></p>\n<p><img src=\"/img/image-20240430092527014.png\" alt=\"image-20240430092527014\"></p>\n<h3 id=\"函数-参数默认值\"><a href=\"#函数-参数默认值\" class=\"headerlink\" title=\"函数-参数默认值\"></a>函数-参数默认值</h3><p><img src=\"/img/image-20240430092543607.png\" alt=\"image-20240430092543607\"></p>\n<h3 id=\"流程控制-Elvis表达式\"><a href=\"#流程控制-Elvis表达式\" class=\"headerlink\" title=\"流程控制-Elvis表达式\"></a>流程控制-Elvis表达式</h3><p><img src=\"/img/image-20240430092640921.png\" alt=\"image-20240430092640921\"></p>\n<h3 id=\"流程控制-When\"><a href=\"#流程控制-When\" class=\"headerlink\" title=\"流程控制-When\"></a>流程控制-When</h3><p><img src=\"/img/image-20240430092847825.png\" alt=\"image-20240430092847825\"></p>\n<h3 id=\"流程控制-while与-for\"><a href=\"#流程控制-while与-for\" class=\"headerlink\" title=\"流程控制-while与 for\"></a>流程控制-while与 for</h3><p><img src=\"/img/image-20240430093028051.png\" alt=\"image-20240430093028051\"></p>\n<p><img src=\"/img/image-20240430093047041.png\" alt=\"image-20240430093047041\"></p>\n<p><img src=\"/img/image-20240430093409715.png\" alt=\"image-20240430093409715\"></p>\n<h2 id=\"四、Kotlin面向对象和特殊类\"><a href=\"#四、Kotlin面向对象和特殊类\" class=\"headerlink\" title=\"四、Kotlin面向对象和特殊类\"></a>四、Kotlin面向对象和特殊类</h2><p>Kotlin 定义的类，在默认情况下是public的，编译器会帮我们生成“构造函数”，对于类当中的属性，Kotlin编译器也会根据实际情况，自动生成getter和setter</p>\n<p><img src=\"/img/image-20240430093633639.png\" alt=\"image-20240430093633639\"></p>\n<p><img src=\"/img/image-20240430093656140.png\" alt=\"image-20240430093656140\"></p>\n<h3 id=\"面向对象-自定义属性\"><a href=\"#面向对象-自定义属性\" class=\"headerlink\" title=\"面向对象-自定义属性\"></a>面向对象-自定义属性</h3><p><img src=\"/img/image-20240430093727189.png\" alt=\"image-20240430093727189\"></p>\n<p><img src=\"/img/image-20240430093759637.png\" alt=\"image-20240430093759637\"></p>\n<h3 id=\"面向对象-类\"><a href=\"#面向对象-类\" class=\"headerlink\" title=\"面向对象-类\"></a>面向对象-类</h3><p><img src=\"/img/image-20240430093817325.png\" alt=\"image-20240430093817325\"></p>\n<p><img src=\"/img/image-20240430093843725.png\" alt=\"image-20240430093843725\"></p>\n<p><img src=\"/img/image-20240430094309388.png\" alt=\"image-20240430094309388\"></p>\n<p><img src=\"/img/image-20240430093932754.png\" alt=\"image-20240430093932754\"></p>\n<p><img src=\"/img/image-20240430094021526.png\" alt=\"image-20240430094021526\"></p>\n<p><img src=\"/img/image-20240430094031309.png\" alt=\"image-20240430094031309\"></p>\n<p><img src=\"/img/image-20240430094049821.png\" alt=\"image-20240430094049821\"></p>\n<h3 id=\"面向对象-嵌套\"><a href=\"#面向对象-嵌套\" class=\"headerlink\" title=\"面向对象-嵌套\"></a>面向对象-嵌套</h3><p><img src=\"/img/image-20240430094104490.png\" alt=\"image-20240430094104490\"></p>\n<h3 id=\"面向对象-特殊类\"><a href=\"#面向对象-特殊类\" class=\"headerlink\" title=\"面向对象-特殊类\"></a>面向对象-特殊类</h3><p><img src=\"/img/image-20240430094234563.png\" alt=\"image-20240430094234563\"></p>\n<p><img src=\"/img/image-20240430094403257.png\" alt=\"image-20240430094403257\"></p>\n<h3 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h3><p><img src=\"/img/image-20240430094550154.png\" alt=\"image-20240430094550154\"></p>\n<p><img src=\"/img/image-20240430094637592.png\" alt=\"image-20240430094637592\"></p>\n<p><img src=\"/img/image-20240430094653413.png\" alt=\"image-20240430094653413\"></p>\n<h4 id=\"object：匿名内部类\"><a href=\"#object：匿名内部类\" class=\"headerlink\" title=\"object：匿名内部类\"></a>object：匿名内部类</h4><p>在Java开发当中，我们经常需要写类似这样的代码：</p>\n<p><img src=\"/img/image-20240430133948019.png\" alt=\"image-20240430133948019\"></p>\n<p>在Kotlin中，匿名内部类还有一个特殊之处，就是我们在使用object定义匿名内部类的时候，其实还可以在继承一个抽象类的同时，来实现多个接口。</p>\n<p><img src=\"/img/image-20240430134131889.png\" alt=\"image-20240430134131889\"></p>\n<p>object定义的第二种语义，也就是单例模式。</p>\n<p><img src=\"/img/image-20240430134254244.png\" alt=\"image-20240430134254244\"></p>\n<p><img src=\"/img/image-20240430134303177.png\" alt=\"image-20240430134303177\"></p>\n<p><img src=\"/img/image-20240430134332190.png\" alt=\"image-20240430134332190\"></p>\n<p><img src=\"/img/image-20240430134405837.png\" alt=\"image-20240430134405837\"></p>\n<h3 id=\"面向对象-扩展函数\"><a href=\"#面向对象-扩展函数\" class=\"headerlink\" title=\"面向对象-扩展函数\"></a>面向对象-扩展函数</h3><p><img src=\"/img/image-20240430134509361.png\" alt=\"image-20240430134509361\"></p>\n<p><img src=\"/img/image-20240430134918735.png\" alt=\"image-20240430134918735\"></p>\n<h2 id=\"五、Kotlin特殊语法糖\"><a href=\"#五、Kotlin特殊语法糖\" class=\"headerlink\" title=\"五、Kotlin特殊语法糖\"></a>五、Kotlin特殊语法糖</h2><h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p><img src=\"/img/image-20240430134939831.png\" alt=\"image-20240430134939831\"></p>\n<p><img src=\"/img/image-20240430135132416.png\" alt=\"image-20240430135132416\"></p>\n<h3 id=\"SAM转换\"><a href=\"#SAM转换\" class=\"headerlink\" title=\"SAM转换\"></a>SAM转换</h3><p><img src=\"/img/image-20240430135436117.png\" alt=\"image-20240430135436117\"></p>\n<h3 id=\"常用的高阶函数\"><a href=\"#常用的高阶函数\" class=\"headerlink\" title=\"常用的高阶函数\"></a>常用的高阶函数</h3><p><img src=\"/img/image-20240430135555540.png\" alt=\"image-20240430135555540\"></p>\n<p><img src=\"/img/image-20240430135725842.png\" alt=\"image-20240430135725842\"></p>\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>我们先从委托类开始，它的使用场景非常简单易懂：它常常用于实现类的“委托模式”。我们来看个简单例子</p>\n<p><img src=\"/img/image-20240430135802020.png\" alt=\"image-20240430135802020\"></p>\n<p><img src=\"/img/image-20240430135956942.png\" alt=\"image-20240430135956942\"></p>\n<h4 id=\"懒加载委托\"><a href=\"#懒加载委托\" class=\"headerlink\" title=\"懒加载委托\"></a>懒加载委托</h4><p><img src=\"/img/image-20240430140114850.png\" alt=\"image-20240430140114850\"></p>\n<h4 id=\"和latelnit的对比\"><a href=\"#和latelnit的对比\" class=\"headerlink\" title=\"和latelnit的对比\"></a>和latelnit的对比</h4><p><img src=\"/img/image-20240430140337478.png\" alt=\"image-20240430140337478\"></p>\n<h2 id=\"六、Kotlin协程\"><a href=\"#六、Kotlin协程\" class=\"headerlink\" title=\"六、Kotlin协程\"></a>六、Kotlin协程</h2><h3 id=\"什么是协程？\"><a href=\"#什么是协程？\" class=\"headerlink\" title=\"什么是协程？\"></a>什么是协程？</h3><p>如果要用简单的语言来描述协程的话，我们可以将其称为：“互相协作的程序</p>\n<h3 id=\"为什么协程如此重要？\"><a href=\"#为什么协程如此重要？\" class=\"headerlink\" title=\"为什么协程如此重要？\"></a>为什么协程如此重要？</h3><p>协程是Kotlin对比Java的最大优势，这也是我说协程是Kotlin中最重要特性的主要原因。虽说Java也在计划着实现自己的协程：Loom，不过这个毕竟还处于相当初级的阶段。而Kotlin的协程，可以帮我们极大地简化异步、并发编程、优化软件架构。通过协程，我们不仅可以提高开发效率，还能提高代码的可读性，由此也就可以降低代码出错的概率。</p>\n<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p><img src=\"/img/image-20240430140532643.png\" alt=\"image-20240430140532643\"></p>\n<h3 id=\"协程轻量级\"><a href=\"#协程轻量级\" class=\"headerlink\" title=\"协程轻量级\"></a>协程轻量级</h3><p><img src=\"/img/image-20240430140732658.png\" alt=\"image-20240430140732658\"></p>\n<p>我们启动了10亿个协程。由于协程是非常轻量的，所以代码不会因为内存不足而异常退出。</p>\n<p>协程虽然运行在线程之上，但协程并不会和某个线程绑定，在某些情况下，协程是可以在不同的线程之间切换的。</p>\n<p><img src=\"/img/image-20240430140813276.png\" alt=\"image-20240430140813276\"></p>\n<h3 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h3><p>协程对比线程还有一个特点，那就是非阻塞（NonBlocking），而线程则往往是阻塞式的。这个概念有点抽象，我们来看个具体的例子</p>\n<p><img src=\"/img/image-20240430140915568.png\" alt=\"image-20240430140915568\"></p>\n<p><img src=\"/img/image-20240430141036736.png\" alt=\"image-20240430141036736\"></p>\n<p><img src=\"/img/image-20240430141048230.png\" alt=\"image-20240430141048230\"></p>\n<p><img src=\"/img/image-20240430141146353.png\" alt=\"image-20240430141146353\"></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><h4 id=\"launch启动协程\"><a href=\"#launch启动协程\" class=\"headerlink\" title=\"launch启动协程\"></a>launch启动协程</h4><p><img src=\"/img/image-20240430141206857.png\" alt=\"image-20240430141206857\"></p>\n<h4 id=\"runBlocking启动协程\"><a href=\"#runBlocking启动协程\" class=\"headerlink\" title=\"runBlocking启动协程\"></a>runBlocking启动协程</h4><p><img src=\"/img/image-20240430141405070.png\" alt=\"image-20240430141405070\"></p>\n<h4 id=\"async启动协程\"><a href=\"#async启动协程\" class=\"headerlink\" title=\"async启动协程\"></a>async启动协程</h4><p><img src=\"/img/image-20240430141451359.png\" alt=\"image-20240430141451359\"></p>\n<h4 id=\"三种启动方式对比\"><a href=\"#三种启动方式对比\" class=\"headerlink\" title=\"三种启动方式对比\"></a>三种启动方式对比</h4><p><img src=\"/img/image-20240430141608532.png\" alt=\"image-20240430141608532\"></p>\n<h3 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a>挂起函数</h3><p>挂起函数。</p>\n<p>挂起函数可以极大地简化异步编程，让我们能够以同步的方式写异步代码。</p>\n<p>挂起函数的本质，就是Callback挂起函数，只能在协程当中被调用，或者是被其他挂起函数调用。</p>\n<p><img src=\"/img/image-20240430141648963.png\" alt=\"image-20240430141648963\"></p>\n<p><img src=\"/img/image-20240430141704062.png\" alt=\"image-20240430141704062\"></p>\n<p><img src=\"/img/image-20240430141752086.png\" alt=\"image-20240430141752086\"></p>\n<p><img src=\"/img/image-20240430141839126.png\" alt=\"image-20240430141839126\"></p>\n<h3 id=\"Job\"><a href=\"#Job\" class=\"headerlink\" title=\"Job\"></a>Job</h3><p><img src=\"/img/image-20240430141921536.png\" alt=\"image-20240430141921536\"></p>\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><ul>\n<li>用于多个携程之间传送数据</li>\n</ul>\n<p><img src=\"/img/image-20240430142030179.png\" alt=\"image-20240430142030179\"></p>\n<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><p>常用的启动方式</p>\n<p><img src=\"/img/image-20240430142118524.png\" alt=\"image-20240430142118524\"></p>\n<h3 id=\"调度器\"><a href=\"#调度器\" class=\"headerlink\" title=\"调度器\"></a>调度器</h3><p><img src=\"/img/image-20240430142253206.png\" alt=\"image-20240430142253206\"></p>\n<p><img src=\"/img/image-20240430142333154.png\" alt=\"image-20240430142333154\"></p>\n<p><img src=\"/img/image-20240430142519737.png\" alt=\"image-20240430142519737\"></p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><h3 id=\"JvmTarget兼容问题\"><a href=\"#JvmTarget兼容问题\" class=\"headerlink\" title=\"JvmTarget兼容问题\"></a>JvmTarget兼容问题</h3><p><img src=\"/img/image-20240430133558897.png\" alt=\"image-20240430133558897\"></p>\n<h2 id=\"课后作业\"><a href=\"#课后作业\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h2><p><img src=\"/img/image-20240430133522569.png\" alt=\"image-20240430133522569\"></p>\n","feature":true,"text":"带你玩转Kotlinkotlin教程：https://www.runoob.com/kotlin/kotlin-tutorial.html 在线运行：https...","permalink":"/post/Android-Day11","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"安卓","slug":"安卓","count":9,"path":"api/categories/安卓.json"}],"tags":[{"name":"Android","slug":"Android","count":9,"path":"api/tags/Android.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E4%BD%A0%E7%8E%A9%E8%BD%ACKotlin\"><span class=\"toc-text\">带你玩转Kotlin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E7%A8%8B%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">课程目标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Kotlin%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">一、Kotlin是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-Kotlin%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F\"><span class=\"toc-text\">1.1 Kotlin的前世今生</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8Kotlin\"><span class=\"toc-text\">1.2 为什么要用Kotlin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\">实现饿汉式单例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Data-class\"><span class=\"toc-text\">Data class</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kotlin%E5%AE%89%E5%85%A8-%E7%A9%BA%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Kotlin安全-空指针</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kotlin%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">Kotlin兼容性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kotlin%E8%B7%A8%E7%AB%AF-%E8%B7%A8%E5%B9%B3%E5%8F%B0\"><span class=\"toc-text\">Kotlin跨端&#x2F;跨平台</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.3 开发环境介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E7%AC%AC%E4%B8%80%E4%B8%AAKT%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1.4 第一个KT程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Kotlin%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">二、Kotlin变量和类型系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2.1 变量定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%92%8CGetter-Setter%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">变量和Getter Setter的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Kotlin%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.2 Kotlin数字类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基础类型-数字类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B-%E5%8C%85%E8%A3%85%E7%B1%BB\"><span class=\"toc-text\">基础类型-包装类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-Kotlin%E7%A9%BA%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">2.3 Kotlin空安全</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-Kotlin%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">2.4 Kotlin类型系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.5 布尔类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">2.6 字符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.7 数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">2.8 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Kotlin%E5%87%BD%E6%95%B0%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">三、Kotlin函数和流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数-定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0-%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数-调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0-%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">函数-参数默认值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-Elvis%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">流程控制-Elvis表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-When\"><span class=\"toc-text\">流程控制-When</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-while%E4%B8%8E-for\"><span class=\"toc-text\">流程控制-while与 for</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Kotlin%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%89%B9%E6%AE%8A%E7%B1%BB\"><span class=\"toc-text\">四、Kotlin面向对象和特殊类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">面向对象-自定义属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB\"><span class=\"toc-text\">面向对象-类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">面向对象-嵌套</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%89%B9%E6%AE%8A%E7%B1%BB\"><span class=\"toc-text\">面向对象-特殊类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%86%E5%B0%81%E7%B1%BB\"><span class=\"toc-text\">密封类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#object%EF%BC%9A%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">object：匿名内部类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">面向对象-扩展函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Kotlin%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95%E7%B3%96\"><span class=\"toc-text\">五、Kotlin特殊语法糖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">高阶函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SAM%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">SAM转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用的高阶函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A7%94%E6%89%98\"><span class=\"toc-text\">委托</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%87%92%E5%8A%A0%E8%BD%BD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">懒加载委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%92%8Clatelnit%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">和latelnit的对比</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81Kotlin%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">六、Kotlin协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">什么是协程？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%8F%E7%A8%8B%E5%A6%82%E6%AD%A4%E9%87%8D%E8%A6%81%EF%BC%9F\"><span class=\"toc-text\">为什么协程如此重要？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">协程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E8%BD%BB%E9%87%8F%E7%BA%A7\"><span class=\"toc-text\">协程轻量级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E9%98%BB%E5%A1%9E\"><span class=\"toc-text\">非阻塞</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">启动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#launch%E5%90%AF%E5%8A%A8%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">launch启动协程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#runBlocking%E5%90%AF%E5%8A%A8%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">runBlocking启动协程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#async%E5%90%AF%E5%8A%A8%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">async启动协程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">三种启动方式对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%82%E8%B5%B7%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">挂起函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Job\"><span class=\"toc-text\">Job</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Channel\"><span class=\"toc-text\">Channel</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Scope\"><span class=\"toc-text\">Scope</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E5%99%A8\"><span class=\"toc-text\">调度器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">七、总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JvmTarget%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">JvmTarget兼容问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">课后作业</span></a></li></ol></li></ol>","author":{"name":"ChenZheng","slug":"chenzheng","avatar":"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/cover/avatar.jpg","link":"https://github.com/sjwusj","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Android_End","uid":"c6514010f10f74959b0358300a9b00fc","slug":"Android-End","date":"2024-05-01T05:33:39.000Z","updated":"2024-05-01T07:53:35.161Z","comments":true,"path":"api/articles/Android-End.json","keywords":null,"cover":[],"text":"课程串讲 课程目标 掌握Android平台进行移动应用程序的设计、开发、测试、调试、发布等流程 掌握企业工作重点实践内容、学习工作中实践问题详解、学习性能优化、...","permalink":"/post/Android-End","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"ChenZheng","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"幼稚园的小朋友の快乐小屋","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"feature":true},"next_post":{"title":"Android_Day10","uid":"5f1ca7b02ab026fddaef0eab3789a5e5","slug":"Android-Day10","date":"2024-04-29T00:04:20.000Z","updated":"2024-04-30T00:00:08.292Z","comments":true,"path":"api/articles/Android-Day10.json","keywords":null,"cover":"image/cover3.jpg","text":"安卓实训第十天内容笔记 —— 内存泄漏优化与ANR解决方案...","permalink":"/post/Android-Day10","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"安卓","slug":"安卓","count":9,"path":"api/categories/安卓.json"}],"tags":[{"name":"Android","slug":"Android","count":9,"path":"api/tags/Android.json"}],"author":{"name":"ChenZheng","slug":"chenzheng","avatar":"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/cover/avatar.jpg","link":"https://github.com/sjwusj","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}