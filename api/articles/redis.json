{"title":"框架高级课程系列之Redis6","uid":"95582c546923823231ab944e518b1285","slug":"redis","date":"2023-11-26T05:01:15.000Z","updated":"2023-11-26T05:05:34.920Z","comments":true,"path":"api/articles/redis.json","keywords":null,"cover":"image/cover3.jpg","content":"<h1 id=\"框架高级课程系列之Redis6\"><a href=\"#框架高级课程系列之Redis6\" class=\"headerlink\" title=\"框架高级课程系列之Redis6\"></a>框架高级课程系列之Redis6</h1><p>尚硅谷JavaEE教研组</p>\n<p>知识：</p>\n<ul>\n<li>Redis 缓存：数据类型、常用操作、Java 操作 Redis、主从模型搭建、哨兵集群搭建、日志持久化、应用场景</li>\n</ul>\n<p>参考视频：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Rv41177Af\">尚硅谷 - 2021 最新 Redis 6 入门到精通教程</a>（基于 Redis 6 的，推荐）(此笔记视频)</li>\n</ul>\n<p>书籍</p>\n<ul>\n<li>《Redis 实战》（经典）</li>\n</ul>\n<p>文档：</p>\n<ul>\n<li><a href=\"http://redisdoc.com/\">Redis 命令参考</a></li>\n<li><a href=\"https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md\">Redis 面试题整理</a></li>\n</ul>\n<p>工具：</p>\n<ul>\n<li>⭐ <a href=\"https://try.redis.io/\">Redis 在线练习</a>（强烈推荐）</li>\n</ul>\n<h2 id=\"1-NoSQL数据库简介\"><a href=\"#1-NoSQL数据库简介\" class=\"headerlink\" title=\"1.  NoSQL数据库简介\"></a>1.  NoSQL数据库简介</h2><h3 id=\"1-1-技术发展\"><a href=\"#1-1-技术发展\" class=\"headerlink\" title=\"1.1  技术发展\"></a>1.1  技术发展</h3><p>技术的分类</p>\n<p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p>\n<p>2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p>\n<p>3、解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p>\n<h4 id=\"1-1-1-Web1-0时代\"><a href=\"#1-1-1-Web1-0时代\" class=\"headerlink\" title=\"1.1.1  Web1.0时代\"></a>1.1.1  Web1.0时代</h4><p>Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/92b82dc514d50511b321f0ec7325767d.png\"></p>\n<h4 id=\"1-1-2-Web2-0时代\"><a href=\"#1-1-2-Web2-0时代\" class=\"headerlink\" title=\"1.1.2  Web2.0时代\"></a>1.1.2  Web2.0时代</h4><p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/05f694e1ea0570a59b08a8e0a1d7423e.png\"></p>\n<h4 id=\"1-1-3-解决CPU及内存压力\"><a href=\"#1-1-3-解决CPU及内存压力\" class=\"headerlink\" title=\"1.1.3  解决CPU及内存压力\"></a>1.1.3  解决CPU及内存压力</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/4031b4ee7eb4d4ac93787f6220064784.jpeg\"></p>\n<h4 id=\"1-1-4-解决IO压力\"><a href=\"#1-1-4-解决IO压力\" class=\"headerlink\" title=\"1.1.4  解决IO压力\"></a>1.1.4  解决IO压力</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/82b95f18b6308f1843735254187b2640.jpeg\"></p>\n<h3 id=\"1-2-NoSQL数据库\"><a href=\"#1-2-NoSQL数据库\" class=\"headerlink\" title=\"1.2  NoSQL数据库\"></a>1.2  NoSQL数据库</h3><h4 id=\"1-2-1-NoSQL数据库概述\"><a href=\"#1-2-1-NoSQL数据库概述\" class=\"headerlink\" title=\"1.2.1  NoSQL数据库概述\"></a>1.2.1  NoSQL数据库概述</h4><p>NoSQL(NoSQL &#x3D; <strong>Not Only SQL</strong> )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。</p>\n<p>NoSQL 不依赖业务逻辑方式存储，而以简单的<strong>key-value</strong>模式存储。因此大大的增加了数据库的扩展能力。</p>\n<ul>\n<li>不遵循SQL标准。</li>\n<li>不支持ACID。</li>\n<li>远超于SQL的性能。</li>\n</ul>\n<h4 id=\"1-2-2-NoSQL适用场景\"><a href=\"#1-2-2-NoSQL适用场景\" class=\"headerlink\" title=\"1.2.2  NoSQL适用场景\"></a>1.2.2  NoSQL适用场景</h4><ul>\n<li>对数据高并发的读写</li>\n<li>海量数据的读写</li>\n<li>对数据高可扩展性的</li>\n</ul>\n<h4 id=\"1-2-3-NoSQL不适用场景\"><a href=\"#1-2-3-NoSQL不适用场景\" class=\"headerlink\" title=\"1.2.3  NoSQL不适用场景\"></a>1.2.3  NoSQL不适用场景</h4><ul>\n<li>需要事务支持</li>\n<li>基于sql的结构化查询存储，处理复杂的关系,需要<strong>即席</strong>查询。</li>\n<li><strong>（用不着sql的和用了sql也不行的情况，请考虑用NoSql）</strong></li>\n</ul>\n<h4 id=\"1-2-4-Memcache\"><a href=\"#1-2-4-Memcache\" class=\"headerlink\" title=\"1.2.4  Memcache\"></a>1.2.4  Memcache</h4><table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b56538d5ccf8953bbd394575650819af.jpeg\"></th>\n<th>很早出现的NoSql数据库  数据都在内存中，一般不持久化  支持简单的key-value模式，支持类型单一 一般是作为缓存数据库辅助持久化的数据库</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"1-2-5-Redis\"><a href=\"#1-2-5-Redis\" class=\"headerlink\" title=\"1.2.5  Redis\"></a>1.2.5  Redis</h4><table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f35361f33e97a10ed730150bad8b9566.jpeg\"></th>\n<th>几乎覆盖了Memcached的绝大部分功能 数据都在内存中，支持持久化，主要用作备份恢复 除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。 一般是作为缓存数据库辅助持久化的数据库</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"1-2-6-MongoDB\"><a href=\"#1-2-6-MongoDB\" class=\"headerlink\" title=\"1.2.6  MongoDB\"></a>1.2.6  MongoDB</h4><table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/cd25aa1d5b656c3535999c249afd7299.jpeg\"></th>\n<th>高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong> 数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘 虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能 支持二进制数据及大型对象 可以根据数据的特点<strong>替代RDBMS</strong> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</th>\n</tr>\n</thead>\n</table>\n<h3 id=\"1-3-行式存储数据库（大数据时代）\"><a href=\"#1-3-行式存储数据库（大数据时代）\" class=\"headerlink\" title=\"1.3  行式存储数据库（大数据时代）\"></a>1.3  行式存储数据库（大数据时代）</h3><h4 id=\"1-3-1-行式数据库\"><a href=\"#1-3-1-行式数据库\" class=\"headerlink\" title=\"1.3.1  行式数据库\"></a>1.3.1  行式数据库</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8667a6f0a9700f5b042a27a46c431f10.jpeg\"></p>\n<h4 id=\"1-3-2-列式数据库\"><a href=\"#1-3-2-列式数据库\" class=\"headerlink\" title=\"1.3.2  列式数据库\"></a>1.3.2  列式数据库</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/95731548963d7b88300fd7f200ab1fc2.jpeg\"></p>\n<h5 id=\"1-3-2-1-Hbase\"><a href=\"#1-3-2-1-Hbase\" class=\"headerlink\" title=\"1.3.2.1  Hbase\"></a>1.3.2.1  Hbase</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/76ff08ae6f3ac32a161248fa64c4c06f.jpeg\"></p>\n<p>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。</p>\n<p>HBase的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong>10亿行数据</strong>，还可处理有数百万<strong>列</strong>元素的数据表。</p>\n<h5 id=\"1-3-2-2-Cassandra-kəˈsaendrə\"><a href=\"#1-3-2-2-Cassandra-kəˈsaendrə\" class=\"headerlink\" title=\"1.3.2.2  Cassandra[kəˈsændrə]\"></a>1.3.2.2  Cassandra[kəˈsændrə]</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3dc15add8f37b0ddc472c2a0424309c0.jpeg\"></p>\n<p>Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的**海量数据集(数据量通常达到PB级别)**。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p>\n<div class=\"language-md\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">md</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">计算机存储单位 计算机存储单位一般用B，KB，MB，GB，TB，EB，ZB，YB，BB来表示，它们之间的关系是：</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">位 bit (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">字节 byte：8个二进制位为一个字节(B)，最常用的单位。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1KB (Kilobyte 千字节)=1024B，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1MB (Megabyte 兆字节 简称“兆”)=1024KB，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1GB (Gigabyte 吉字节 又称“千兆”)=1024MB，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1TB (Trillionbyte 万亿字节 太字节)=1024GB，其中1024=2^10 ( 2 的10次方)，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1PB（Petabyte 千万亿字节 拍字节）=1024TB，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1EB（Exabyte 百亿亿字节 艾字节）=1024PB，</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1YB (Jottabyte 一亿亿亿字节 尧字节)= 1024 ZB,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">注：“兆”为百万级数量单位。</span></span></code></pre></div><h3 id=\"1-4-图关系型数据库\"><a href=\"#1-4-图关系型数据库\" class=\"headerlink\" title=\"1.4  图关系型数据库\"></a>1.4  图关系型数据库</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/bcf0805761e1d420306a8a82725cda0d.jpeg\"></p>\n<p>主要应用：社会关系，公共交通网络，地图及网络拓谱(n*(n-1)&#x2F;2)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/c5a1544e06db0e0947625e4b80165a72.jpeg\"></p>\n<h3 id=\"1-5-DB-Engines-数据库排名\"><a href=\"#1-5-DB-Engines-数据库排名\" class=\"headerlink\" title=\"1.5  DB-Engines 数据库排名\"></a>1.5  DB-Engines 数据库排名</h3><p><a href=\"http://db-engines.com/en/ranking\"><strong>http://db-engines.com/en/ranking</strong></a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/19b6ce3fa2b9cb09876de7508a74e561.png\"></p>\n<h2 id=\"2-Redis概述安装\"><a href=\"#2-Redis概述安装\" class=\"headerlink\" title=\"2. Redis概述安装\"></a>2. Redis概述安装</h2><ul>\n<li>Redis是一个开源的key-value存储系统。</li>\n<li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</li>\n<li>这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li>\n<li>在此基础上，Redis支持各种不同方式的排序。</li>\n<li>与memcached一样，为了保证效率，数据都是缓存在内存中。</li>\n<li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li>\n<li>并且在此基础上实现了master-slave(主从)同步。</li>\n</ul>\n<h3 id=\"2-1-应用场景\"><a href=\"#2-1-应用场景\" class=\"headerlink\" title=\"2.1  应用场景\"></a>2.1  应用场景</h3><h4 id=\"2-1-1-配合关系型数据库做高速缓存\"><a href=\"#2-1-1-配合关系型数据库做高速缓存\" class=\"headerlink\" title=\"2.1.1  配合关系型数据库做高速缓存\"></a>2.1.1  配合关系型数据库做高速缓存</h4><ul>\n<li>高频次，热门访问的数据，降低数据库IO</li>\n<li>分布式架构，做session共享</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/23cbc60dc2f7e121bd64acb1c9aae4a0.jpeg\"></p>\n<h4 id=\"2-1-2-多样的数据结构存储持久化数据\"><a href=\"#2-1-2-多样的数据结构存储持久化数据\" class=\"headerlink\" title=\"2.1.2 多样的数据结构存储持久化数据\"></a>2.1.2 多样的数据结构存储持久化数据</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3f9e3ad1c31a3be94888730d211889cb.jpeg\"></p>\n<h3 id=\"2-2-Redis安装\"><a href=\"#2-2-Redis安装\" class=\"headerlink\" title=\"2.2  Redis安装\"></a>2.2  Redis安装</h3><table>\n<thead>\n<tr>\n<th>Redis官方网站</th>\n<th>Redis中文官方网站</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://redis.io/\"><strong>http://redis.io</strong></a></td>\n<td><a href=\"http://redis.cn/\">http://redis.cn/</a></td>\n</tr>\n</tbody></table>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/25ebdf56187ececc06deb6549cd32db3.png\" style=\"zoom:67%;\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8ef153c2b8664b5d53befa57acf83d1a.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"2-2-1-安装版本\"><a href=\"#2-2-1-安装版本\" class=\"headerlink\" title=\"2.2.1  安装版本\"></a>2.2.1  安装版本</h4><ul>\n<li>6.2.1 for Linux（redis-6.2.1.tar.gz）</li>\n<li>不用考虑在windows环境下对Redis的支持</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/dbd7153e050e02b0c1221e18dc635d29.jpeg\"></p>\n<h4 id=\"2-2-2-安装步骤\"><a href=\"#2-2-2-安装步骤\" class=\"headerlink\" title=\"2.2.2 安装步骤\"></a>2.2.2 安装步骤</h4><h5 id=\"2-2-2-1-准备工作：下载安装最新版的gcc编译器\"><a href=\"#2-2-2-1-准备工作：下载安装最新版的gcc编译器\" class=\"headerlink\" title=\"2.2.2.1 准备工作：下载安装最新版的gcc编译器\"></a>2.2.2.1 准备工作：下载安装最新版的gcc编译器</h5><p>安装C 语言的编译环境</p>\n<p><strong>yum install centos-release-scl scl-utils-build</strong></p>\n<p><strong>yum install -y devtoolset-8-toolchain</strong></p>\n<p><strong>scl enable devtoolset-8 bash</strong></p>\n<p><strong>测试 gcc版本</strong></p>\n<p><strong>gcc –version</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/db5ec955edfc87d6e0e26dbea6903137.png\"></p>\n<h5 id=\"2-2-2-2-下载redis-6-2-1-tar-gz放-opt目录\"><a href=\"#2-2-2-2-下载redis-6-2-1-tar-gz放-opt目录\" class=\"headerlink\" title=\"2.2.2.2 下载redis-6.2.1.tar.gz放&#x2F;opt目录\"></a>2.2.2.2 下载redis-6.2.1.tar.gz放&#x2F;opt目录</h5><h5 id=\"2-2-2-3-解压命令：tar-zxvf-redis-6-2-1-tar-gz\"><a href=\"#2-2-2-3-解压命令：tar-zxvf-redis-6-2-1-tar-gz\" class=\"headerlink\" title=\"2.2.2.3 解压命令：tar -zxvf redis-6.2.1.tar.gz\"></a>2.2.2.3 解压命令：tar -zxvf redis-6.2.1.tar.gz</h5><h5 id=\"2-2-2-4-解压完成后进入目录：cd-redis-6-2-1\"><a href=\"#2-2-2-4-解压完成后进入目录：cd-redis-6-2-1\" class=\"headerlink\" title=\"2.2.2.4 解压完成后进入目录：cd redis-6.2.1\"></a>2.2.2.4 解压完成后进入目录：cd redis-6.2.1</h5><h5 id=\"2-2-2-5-在redis-6-2-1目录下再次执行make命令（只是编译好）\"><a href=\"#2-2-2-5-在redis-6-2-1目录下再次执行make命令（只是编译好）\" class=\"headerlink\" title=\"2.2.2.5 在redis-6.2.1目录下再次执行make命令（只是编译好）\"></a>2.2.2.5 在redis-6.2.1目录下再次执行make命令（只是编译好）</h5><h5 id=\"2-2-2-6-如果没有准备好C语言编译环境，make-会报错—Jemalloc-jemalloc-h：没有那个文件\"><a href=\"#2-2-2-6-如果没有准备好C语言编译环境，make-会报错—Jemalloc-jemalloc-h：没有那个文件\" class=\"headerlink\" title=\"2.2.2.6 如果没有准备好C语言编译环境，make 会报错—Jemalloc&#x2F;jemalloc.h：没有那个文件\"></a>2.2.2.6 如果没有准备好C语言编译环境，make 会报错—Jemalloc&#x2F;jemalloc.h：没有那个文件</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2eae9b47d3558ebbdbe2fcd12421c1b2.jpeg\"></p>\n<h5 id=\"2-2-2-7-解决方案：运行make-distclean\"><a href=\"#2-2-2-7-解决方案：运行make-distclean\" class=\"headerlink\" title=\"2.2.2.7 解决方案：运行make distclean\"></a>2.2.2.7 解决方案：运行make distclean</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/20aff847c24a51d2f34b5cc4f9161573.jpeg\"></p>\n<h5 id=\"2-2-2-8-在redis-6-2-1目录下再次执行make命令（只是编译好）\"><a href=\"#2-2-2-8-在redis-6-2-1目录下再次执行make命令（只是编译好）\" class=\"headerlink\" title=\"2.2.2.8 在redis-6.2.1目录下再次执行make命令（只是编译好）\"></a>2.2.2.8 在redis-6.2.1目录下再次执行make命令（只是编译好）</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9835091483d50961fb0a877dffc5c415.jpeg\"></p>\n<h5 id=\"2-2-2-9-跳过make-test-继续执行-make-install\"><a href=\"#2-2-2-9-跳过make-test-继续执行-make-install\" class=\"headerlink\" title=\"2.2.2.9 跳过make test 继续执行: make install\"></a>2.2.2.9 跳过make test 继续执行: make install</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9a4100cf3cb4e6e9aaeb7540c8730bea.jpeg\"></p>\n<h4 id=\"2-2-3-安装目录：-usr-local-bin\"><a href=\"#2-2-3-安装目录：-usr-local-bin\" class=\"headerlink\" title=\"2.2.3 **安装目录：&#x2F;**usr&#x2F;local&#x2F;bin\"></a>2.2.3 **安装目录：&#x2F;**usr&#x2F;local&#x2F;bin</h4><p>查看默认安装目录：</p>\n<p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</p>\n<p>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</p>\n<p>redis-check-dump：修复有问题的dump.rdb文件</p>\n<p>redis-sentinel：Redis集群使用</p>\n<p>&#x3D;&#x3D;redis-server&#x3D;&#x3D;：Redis服务器启动命令</p>\n<p>&#x3D;&#x3D;redis-cli&#x3D;&#x3D;：客户端，操作入口</p>\n<h4 id=\"2-2-4-前台启动（不推荐）\"><a href=\"#2-2-4-前台启动（不推荐）\" class=\"headerlink\" title=\"2.2.4 前台启动（不推荐）\"></a>2.2.4 前台启动（不推荐）</h4><p>前台启动，命令行窗口不能关闭，否则服务器停止</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/73a40696ca1f745078f70084ff6e6f78.jpeg\"></p>\n<h4 id=\"2-2-5-后台启动（-推荐-）\"><a href=\"#2-2-5-后台启动（-推荐-）\" class=\"headerlink\" title=\"2.2.5 后台启动（&#x3D;&#x3D;推荐&#x3D;&#x3D;）\"></a>2.2.5 后台启动（&#x3D;&#x3D;推荐&#x3D;&#x3D;）</h4><ol>\n<li><strong>备份redis.con</strong></li>\n</ol>\n<p>拷贝一份redis.conf到其他目录</p>\n<p>cp &#x2F;opt&#x2F;redis-3.2.5&#x2F;redis.conf &#x2F;myredis</p>\n<ol start=\"2\">\n<li><strong>后台启动设置daemonize no改成yes</strong></li>\n</ol>\n<p>修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p>\n<ol start=\"3\">\n<li><strong>Redis启动</strong></li>\n</ol>\n<p>redis-server&#x2F;myredis&#x2F;redis.conf</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/56fdb4b1f90b20c8f2a8b9ed800d9727.jpeg\"></p>\n<ol start=\"4\">\n<li><strong>用客户端访问：redis-cli</strong></li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f35ca607b94e9973cb41e936f38388b3.jpeg\"></p>\n<ol start=\"5\">\n<li><p><strong>多个端口可以：redis-cli -p 6379</strong></p>\n</li>\n<li><p><strong>测试验证： ping</strong></p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/df56df619bb8d87bf1662d09eef2a5ec.jpeg\"></p>\n<ol start=\"7\">\n<li><strong>Redis关闭</strong></li>\n</ol>\n<p>单实例关闭：redis-cli shutdown</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f11b23327709a1418d44e41c7634444c.jpeg\"></p>\n<p>也可以进入终端后再关闭</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2056fdb9ed66a10eb26c9bdd9bf59b5c.jpeg\"></p>\n<p>多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</p>\n<h4 id=\"2-2-6-Redis介绍相关知识\"><a href=\"#2-2-6-Redis介绍相关知识\" class=\"headerlink\" title=\"2.2.6 Redis介绍相关知识\"></a>2.2.6 Redis介绍相关知识</h4><table>\n<thead>\n<tr>\n<th>端口6379从何而来 Alessia Merz <img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1d1ca2be7779f486ebf4719c4fdecac0.jpeg\"></th>\n<th>默认16个数据库，类似数组下标从0开始，初始默认使用0号库 <br>使用命令 select &lt;dbid&gt;来切换数据库。如: select 8  <br/>统一密码管理，所有库同样密码。 <br/>dbsize查看当前数据库的key的数量 <br/>flushdb清空当前库 flushall通杀全部库</th>\n</tr>\n</thead>\n</table>\n<p>Redis是单线程+多路IO复用技术</p>\n<p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p>\n<p><strong>&#x3D;&#x3D;串行 vs 多线程+锁（memcached） vs 单线程+多路IO复用(Redis)&#x3D;&#x3D;</strong></p>\n<p>（与Memcache三点不同: 支持多数据类型，支持持久化，单线程+多路IO复用）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/18d8525aceddb840ea4c131002716221.gif\"></p>\n<h2 id=\"3-常用五大数据类型\"><a href=\"#3-常用五大数据类型\" class=\"headerlink\" title=\"3. 常用五大数据类型\"></a>3. 常用五大数据类型</h2><p>哪里去获得redis常见数据类型操作命令<a href=\"http://www.redis.cn/commands.html\">http://www.redis.cn/commands.html</a></p>\n<h3 id=\"3-1-Redis键-key\"><a href=\"#3-1-Redis键-key\" class=\"headerlink\" title=\"3.1 Redis键(key)\"></a>3.1 Redis键(key)</h3><p>keys *  \t\t查看当前库所有key (匹配：keys *1)</p>\n<p>exists key \t\t判断某个key是否存在</p>\n<p>type key  \t\t查看你的key是什么类型</p>\n<p>del key  \t\t删除指定的key数据</p>\n<p><strong>unlink key  \t\t根据value选择非阻塞删除</strong></p>\n<p>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p>\n<p>expire key 10 \t\t10秒钟：为给定的key设置过期时间</p>\n<p>ttl key \t\t查看还有多少秒过期，-1表示永不过期，-2表示已过期</p>\n<p>select\t\t命令切换数据库</p>\n<p>dbsize\t\t查看当前数据库的key的数量</p>\n<p>flushdb\t\t清空当前库</p>\n<p>flushall\t\t通杀全部库</p>\n<h3 id=\"3-2-Redis字符串-String\"><a href=\"#3-2-Redis字符串-String\" class=\"headerlink\" title=\"3.2 Redis字符串(String)\"></a>3.2 Redis字符串(String)</h3><h4 id=\"3-2-1-简介\"><a href=\"#3-2-1-简介\" class=\"headerlink\" title=\"3.2.1 简介\"></a>3.2.1 简介</h4><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>\n<p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>\n<h4 id=\"3-2-2-常用命令\"><a href=\"#3-2-2-常用命令\" class=\"headerlink\" title=\"3.2.2 常用命令\"></a>3.2.2 常用命令</h4><p>set &lt;key&gt;&lt;value&gt;添加键值对</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/0edd28d4ff7f5b36b0bfaabf6d1f6a10.png\"></p>\n<p>*NX：当数据库中key不存在时，可以将key-value添加数据库</p>\n<p>*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p>\n<p>*EX：key的超时秒数</p>\n<p>*PX：key的超时毫秒数，与EX互斥</p>\n<p>get &lt;key&gt;\t\t查询对应键值</p>\n<p>append &lt;key&gt;&lt;value&gt;\t\t将给定的&lt;value&gt; 追加到原值的末尾</p>\n<p>strlen &lt;key&gt;\t\t获得值的长度</p>\n<p>setnx &lt;key&gt;&lt;value&gt;\t\t只有在 key 不存在时 设置 key 的值</p>\n<p>incr &lt;key&gt;</p>\n<p>​\t\t\t\t将 key 中储存的数字值增1</p>\n<p>​\t\t\t\t只能对数字值操作，如果为空，新增值为1</p>\n<p>decr &lt;key&gt;</p>\n<p>​\t\t\t\t将 key 中储存的数字值减1</p>\n<p>​\t\t\t\t只能对数字值操作，如果为空，新增值为-1</p>\n<p>incrby &#x2F; decrby &lt;key&gt;&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</p>\n<table>\n<thead>\n<tr>\n<th>原子性 <br> <img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/cfc8d8afa27ce36014b854ac7e33d969.jpeg\"> <br>所谓<strong>原子</strong>操作是指不会被线程调度机制打断的操作； <br>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。 <br/>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。 <br/>（2）在多线程中，不能被其它进程（线程)打断的操作就叫原子操作。<br/>Redis单命令的原子性主要得益于Redis的单线程。 <br/><strong>案例：</strong> java中的i++是否是原子操作？<strong>不是</strong> i&#x3D;0;两个线程分别对i进行++100次,值是多少？ <strong>2~200</strong> i&#x3D;0 i++ i&#x3D;99     i&#x3D;1     i++ i&#x3D;2 i&#x3D;0    i++ i&#x3D;1   i++ i&#x3D;100</th>\n</tr>\n</thead>\n</table>\n<p>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …..</p>\n<p>同时设置一个或多个 key-value对</p>\n<p>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; …..</p>\n<p>同时获取一个或多个 value</p>\n<p>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …..</p>\n<p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p>\n<p>&#x3D;&#x3D;原子性，有一个失败则都失败&#x3D;&#x3D;</p>\n<p>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</p>\n<p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p>\n<p>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</p>\n<p>用 &lt;value&gt; 覆写&lt;key&gt;所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</p>\n<p><strong>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</strong></p>\n<p>设置键值的同时，设置过期时间，单位秒。</p>\n<p>getset &lt;key&gt;&lt;value&gt;</p>\n<p>以新换旧，设置了新值同时获得旧值。</p>\n<h4 id=\"3-2-3-数据结构\"><a href=\"#3-2-3-数据结构\" class=\"headerlink\" title=\"3.2.3 数据结构\"></a>3.2.3 数据结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e5c73c34fb8fc036262e98dda28e1c4f.png\"></p>\n<p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p>\n<h3 id=\"3-3-Redis列表-List\"><a href=\"#3-3-Redis列表-List\" class=\"headerlink\" title=\"3.3 Redis列表(List)\"></a>3.3 Redis列表(List)</h3><h4 id=\"3-3-1-简介\"><a href=\"#3-3-1-简介\" class=\"headerlink\" title=\"3.3.1 简介\"></a>3.3.1 简介</h4><p>单键多值</p>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/cf592cc5af691e0850b1a5d5770391bb.jpeg\"></p>\n<h4 id=\"3-3-2-常用命令\"><a href=\"#3-3-2-常用命令\" class=\"headerlink\" title=\"3.3.2 常用命令\"></a>3.3.2 常用命令</h4><p>lpush&#x2F;rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; …. \t\t从左边&#x2F;右边插入一个或多个值。</p>\n<p>lpop&#x2F;rpop &lt;key&gt;\t\t从左边&#x2F;右边吐出一个值。<strong>值在键在，值光键亡。</strong></p>\n<p>rpoplpush &lt;key1&gt;&lt;key2&gt;\t\t从&lt;key1&gt;列表右边吐出一个值，插到&lt;key2&gt;列表左边。</p>\n<p>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;\t按照索引下标获得元素(从左到右)</p>\n<p>lrange mylist 0 -1 \t\t<strong>0左边第一个，-1右边第一个，（0-1表示获取所有）</strong></p>\n<p>lindex &lt;key&gt;&lt;index&gt;\t\t按照索引下标获得元素(从左到右)</p>\n<p>llen &lt;key&gt;\t\t获得列表长度</p>\n<p>linsert &lt;key&gt; before &lt;value&gt;&lt;newvalue&gt;\t\t在&lt;value&gt;的后面插入&lt;newvalue&gt;插入值</p>\n<p>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;\t\t从左边删除n个value(从左到右)</p>\n<p>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;\t\t将列表key下标为index的值替换成value</p>\n<h4 id=\"3-3-3-数据结构\"><a href=\"#3-3-3-数据结构\" class=\"headerlink\" title=\"3.3.3 数据结构\"></a>3.3.3 数据结构</h4><p>List的数据结构为快速链表quickList。</p>\n<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p>\n<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>\n<p>当数据量比较多的时候才会改成quicklist。</p>\n<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/38169b6632fee0e7c2a906ee1af2155b.png\"></p>\n<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>\n<h3 id=\"3-4-Redis集合-Set\"><a href=\"#3-4-Redis集合-Set\" class=\"headerlink\" title=\"3.4 Redis集合(Set)\"></a>3.4 Redis集合(Set)</h3><h4 id=\"3-4-1-简介\"><a href=\"#3-4-1-简介\" class=\"headerlink\" title=\"3.4.1 简介\"></a>3.4.1 简介</h4><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>\n<p>Redis的Set是string类型的<strong>无序集合</strong>。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是O(1)**。</p>\n<p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p>\n<h4 id=\"3-4-2-常用命令\"><a href=\"#3-4-2-常用命令\" class=\"headerlink\" title=\"3.4.2 常用命令\"></a>3.4.2 常用命令</h4><p>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; …..</p>\n<p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p>\n<p>smembers &lt;key&gt;取出该集合的所有值。</p>\n<p>sismember &lt;key&gt;&lt;value&gt;判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0</p>\n<p>scard&lt;key&gt;返回该集合的元素个数。</p>\n<p>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; …. 删除集合中的某个元素。</p>\n<p>spop &lt;key&gt;<strong>随机从该集合中吐出一个值。</strong></p>\n<p>srandmember &lt;key&gt;&lt;n&gt;随机从该集合中取出n个值。不会从集合中删除 。</p>\n<p>smove &lt;source&gt;&lt;destination&gt;value把集合中一个值从一个集合移动到另一个集合</p>\n<p>sinter &lt;key1&gt;&lt;key2&gt;返回两个集合的交集元素。</p>\n<p>sunion &lt;key1&gt;&lt;key2&gt;返回两个集合的并集元素。</p>\n<p>sdiff &lt;key1&gt;&lt;key2&gt;返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p>\n<h4 id=\"3-4-3-数据结构\"><a href=\"#3-4-3-数据结构\" class=\"headerlink\" title=\"3.4.3 数据结构\"></a>3.4.3 数据结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的。</p>\n<p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>\n<h3 id=\"3-5-Redis哈希-Hash\"><a href=\"#3-5-Redis哈希-Hash\" class=\"headerlink\" title=\"3.5 Redis哈希(Hash)\"></a>3.5 Redis哈希(Hash)</h3><h4 id=\"3-5-1-简介\"><a href=\"#3-5-1-简介\" class=\"headerlink\" title=\"3.5.1 简介\"></a>3.5.1 简介</h4><p>Redis hash 是一个键值对集合。</p>\n<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>\n<p>类似Java里面的Map&lt;String,Object&gt;</p>\n<p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key&#x2F;value结构来存储</p>\n<p>主要有以下2种存储方式：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a4619eb59506f55126a6bcfd9d448804.jpeg\"> <br/>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/354e3e7bd3f3a6963ed6383e54e4e613.jpeg\"> <br/>用户ID数据冗余</th>\n</tr>\n</thead>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d88576a0754ce93e905545236187e86a.jpeg\"></strong> <br/>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"3-5-2-常用命令\"><a href=\"#3-5-2-常用命令\" class=\"headerlink\" title=\"3.5.2 常用命令\"></a>3.5.2 常用命令</h4><p>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;给&lt;key&gt;集合中的 &lt;field&gt;键赋值&lt;value&gt;</p>\n<p>hget &lt;key1&gt;&lt;field&gt;从&lt;key1&gt;集合&lt;field&gt;取出 value</p>\n<p>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;… 批量设置hash的值</p>\n<p>hexists&lt;key1&gt;&lt;field&gt;查看哈希表 key 中，给定域 field 是否存在。</p>\n<p>hkeys &lt;key&gt;列出该hash集合的所有field</p>\n<p>hvals &lt;key&gt;列出该hash集合的所有value</p>\n<p>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;为哈希表 key 中的域 field 的值加上增量 1 -1</p>\n<p>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</p>\n<h4 id=\"3-5-3-数据结构\"><a href=\"#3-5-3-数据结构\" class=\"headerlink\" title=\"3.5.3 数据结构\"></a>3.5.3 数据结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p>\n<h3 id=\"3-6-Redis有序集合Zset-sorted-set\"><a href=\"#3-6-Redis有序集合Zset-sorted-set\" class=\"headerlink\" title=\"3.6 Redis有序集合Zset(sorted set)\"></a>3.6 Redis有序集合Zset(sorted set)</h3><h4 id=\"3-6-1-简介\"><a href=\"#3-6-1-简介\" class=\"headerlink\" title=\"3.6.1 简介\"></a>3.6.1 简介</h4><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p>\n<p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了</strong> 。</p>\n<p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>\n<p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p>\n<h4 id=\"3-6-2-常用命令\"><a href=\"#3-6-2-常用命令\" class=\"headerlink\" title=\"3.6.2 常用命令\"></a>3.6.2 常用命令</h4><p>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</p>\n<p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p>\n<p><strong>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</strong></p>\n<p>返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素</p>\n<p>带WITHSCORES，可以让分数一起和值返回到结果集。</p>\n<p>zrangebyscore key minmax [withscores] [limit offset count]</p>\n<p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</p>\n<p>zrevrangebyscore key maxmin [withscores] [limit offset count]</p>\n<p>同上，改为从大到小排列。</p>\n<p>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt; 为元素的score加上增量</p>\n<p>zrem &lt;key&gt;&lt;value&gt;删除该集合下，指定值的元素</p>\n<p>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;统计该集合，分数区间内的元素个数</p>\n<p>zrank &lt;key&gt;&lt;value&gt;返回该值在集合中的排名，从0开始。</p>\n<p>案例：如何利用zset实现一个文章访问量的排行榜？</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e7cae1499600e19065d8fa0a3c64fd94.jpeg\"></p>\n<h4 id=\"3-6-3-数据结构\"><a href=\"#3-6-3-数据结构\" class=\"headerlink\" title=\"3.6.3 数据结构\"></a>3.6.3 数据结构</h4><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p>\n<p>zset底层使用了两个数据结构</p>\n<p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p>\n<p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p>\n<h4 id=\"3-6-4-跳跃表（跳表）\"><a href=\"#3-6-4-跳跃表（跳表）\" class=\"headerlink\" title=\"3.6.4 跳跃表（跳表）\"></a>3.6.4 跳跃表（跳表）</h4><p>1、简介</p>\n<p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p>\n<p>2、实例</p>\n<p>对比有序链表和跳跃表，从链表中查询出51</p>\n<p>(1). 有序链表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8622f2cb7b4565c65ef0bba85295fe20.png\"></p>\n<p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p>\n<p>(2). 跳跃表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e7b7b33d0447e5d7307bca652756c635.png\"></p>\n<p>从第2层开始，1节点比51节点小，向后比较。</p>\n<p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p>\n<p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p>\n<p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p>\n<p>从此可以看出跳跃表比有序链表效率要高</p>\n<h2 id=\"4-Redis配置文件介绍\"><a href=\"#4-Redis配置文件介绍\" class=\"headerlink\" title=\"4.Redis配置文件介绍\"></a>4.Redis配置文件介绍</h2><p>自定义目录：&#x2F;myredis&#x2F;redis.conf</p>\n<h3 id=\"4-1-Units单位\"><a href=\"#4-1-Units单位\" class=\"headerlink\" title=\"4.1 Units单位\"></a>4.1 Units单位</h3><p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit</p>\n<p>大小写不敏感</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/49741d11027ab67d78634435b4ef0b6d.jpeg\"></p>\n<h3 id=\"4-2-INCLUDES包含\"><a href=\"#4-2-INCLUDES包含\" class=\"headerlink\" title=\"4.2 INCLUDES包含\"></a>4.2 INCLUDES包含</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/496170972993600d34071d0a02a1810b.jpeg\"></p>\n<p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p>\n<h3 id=\"4-3-网络相关配置\"><a href=\"#4-3-网络相关配置\" class=\"headerlink\" title=\"4.3 网络相关配置\"></a>4.3 网络相关配置</h3><h4 id=\"4-3-1-bind\"><a href=\"#4-3-1-bind\" class=\"headerlink\" title=\"4.3.1 bind\"></a>4.3.1 bind</h4><p>默认情况bind&#x3D;127.0.0.1只能接受本机的访问请求</p>\n<p>不写的情况下，无限制接受任何ip地址的访问</p>\n<p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p>\n<p><strong>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/fbd3a9b8508d20eae0d64e66e2618d52.jpeg\"></p>\n<p>保存配置，停止服务，重启启动查看进程，不再是本机访问了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/5a306e0ab4e0d95ec3463251b1649c70.jpeg\"></p>\n<h4 id=\"4-3-2-protected-mode\"><a href=\"#4-3-2-protected-mode\" class=\"headerlink\" title=\"4.3.2 protected-mode\"></a>4.3.2 protected-mode</h4><p>将本机访问保护模式设置no</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f9152e895fc53624638bc3138efcdeeb.jpeg\"></p>\n<h4 id=\"4-3-3-Port\"><a href=\"#4-3-3-Port\" class=\"headerlink\" title=\"4.3.3 Port\"></a>4.3.3 Port</h4><p>端口号，默认 6379</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ed4060c1c8777f00fc325fbfa338fb56.jpeg\"></p>\n<h4 id=\"4-3-4-tcp-backlog\"><a href=\"#4-3-4-tcp-backlog\" class=\"headerlink\" title=\"4.3.4 tcp-backlog\"></a>4.3.4 tcp-backlog</h4><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和&#x3D;未完成三次握手队列 + 已经完成三次握手队列。</p>\n<p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p>\n<p>注意Linux内核会将这个值减小到&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn的值（128），所以需要确认增大&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn和&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog（128）两个值来达到想要的效果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/88b58729e0ffa123bd10a88256271040.jpeg\"></p>\n<h4 id=\"4-3-5-timeout\"><a href=\"#4-3-5-timeout\" class=\"headerlink\" title=\"4.3.5 timeout\"></a>4.3.5 timeout</h4><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即<strong>永不关闭</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a191928b52d1dd3f447e87ec088b837c.jpeg\"></p>\n<h4 id=\"4-3-6-tcp-keepalive\"><a href=\"#4-3-6-tcp-keepalive\" class=\"headerlink\" title=\"4.3.6 tcp-keepalive\"></a>4.3.6 tcp-keepalive</h4><p>对访问客户端的一种<strong>心跳检测</strong>，每个n秒检测一次。</p>\n<p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/7bcce66668902a2a91e8191e8ef48b82.jpeg\"></p>\n<h3 id=\"4-4-GENERAL通用\"><a href=\"#4-4-GENERAL通用\" class=\"headerlink\" title=\"4.4 GENERAL通用\"></a>4.4 GENERAL通用</h3><h4 id=\"4-4-1-daemonize\"><a href=\"#4-4-1-daemonize\" class=\"headerlink\" title=\"4.4.1 daemonize\"></a>4.4.1 daemonize</h4><p>是否为后台进程，设置为yes</p>\n<p>守护进程，后台启动</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/eee138f00fec5a561f6afe4471271e00.jpeg\"></p>\n<h4 id=\"4-4-2-pidfile\"><a href=\"#4-4-2-pidfile\" class=\"headerlink\" title=\"4.4.2 pidfile\"></a>4.4.2 pidfile</h4><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/802d82dd93949442bae8999d12bed278.jpeg\"></p>\n<h4 id=\"4-4-3-loglevel\"><a href=\"#4-4-3-loglevel\" class=\"headerlink\" title=\"4.4.3 loglevel\"></a>4.4.3 loglevel</h4><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p>\n<p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d54ecabcc36ead42ae41ed42cbbb376d.jpeg\"></p>\n<h4 id=\"4-4-4-logfile\"><a href=\"#4-4-4-logfile\" class=\"headerlink\" title=\"4.4.4 logfile\"></a>4.4.4 logfile</h4><p>日志文件名称</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8c5744b4eaa47c63219f936c441bfc52.jpeg\"></p>\n<h4 id=\"4-4-5-databases-16\"><a href=\"#4-4-5-databases-16\" class=\"headerlink\" title=\"4.4.5 databases 16\"></a>4.4.5 databases 16</h4><p><strong>设定库的数量 默认16</strong>，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9e321994ceb591385add1555ed22103f.jpeg\"></p>\n<h3 id=\"4-5-SECURITY安全\"><a href=\"#4-5-SECURITY安全\" class=\"headerlink\" title=\"4.5 SECURITY安全\"></a>4.5 SECURITY安全</h3><h4 id=\"4-5-1-设置密码\"><a href=\"#4-5-1-设置密码\" class=\"headerlink\" title=\"4.5.1 设置密码\"></a>4.5.1 设置密码</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/6b5626b431f27e94c77d47f01d007edb.jpeg\"></p>\n<p>访问密码的查看、设置和取消</p>\n<p>在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</p>\n<p>永久设置，需要再配置文件中进行设置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1b5eb43c19cef4024b96d5cc760a7242.jpeg\"></p>\n<h3 id=\"4-6-LIMITS限制\"><a href=\"#4-6-LIMITS限制\" class=\"headerlink\" title=\"4.6  LIMITS限制\"></a>4.6  LIMITS限制</h3><h4 id=\"4-6-1-maxclients\"><a href=\"#4-6-1-maxclients\" class=\"headerlink\" title=\"4.6.1 maxclients\"></a>4.6.1 maxclients</h4><ul>\n<li>设置redis同时可以与多少个客户端进行连接。</li>\n<li>默认情况下为10000个客户端。</li>\n<li>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/6b9aa805a597ab4933e8749aa434f1bb.jpeg\"></p>\n<h4 id=\"4-6-2-maxmemory\"><a href=\"#4-6-2-maxmemory\" class=\"headerlink\" title=\"4.6.2 maxmemory\"></a>4.6.2 maxmemory</h4><ul>\n<li>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</li>\n<li>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</li>\n<li>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</li>\n<li>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a8ec78244416c8349c6707339936c4b2.jpeg\"></p>\n<h4 id=\"4-6-3-maxmemory-policy\"><a href=\"#4-6-3-maxmemory-policy\" class=\"headerlink\" title=\"4.6.3 maxmemory-policy\"></a>4.6.3 maxmemory-policy</h4><ul>\n<li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li>\n<li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li>\n<li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li>\n<li>allkeys-random：在所有集合key中，移除随机的key</li>\n<li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li>\n<li>noeviction：不进行移除。针对写操作，只是返回错误信息</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/66c180e1befc62f1a2d202b466f064a1.jpeg\"></p>\n<h4 id=\"4-6-4-maxmemory-samples\"><a href=\"#4-6-4-maxmemory-samples\" class=\"headerlink\" title=\"4.6.4 maxmemory-samples\"></a>4.6.4 maxmemory-samples</h4><ul>\n<li>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</li>\n<li>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/7db69781637462dc4d2ed8f153a4f72e.jpeg\"></p>\n<h2 id=\"5-Redis的发布和订阅\"><a href=\"#5-Redis的发布和订阅\" class=\"headerlink\" title=\"5.Redis的发布和订阅\"></a>5.Redis的发布和订阅</h2><h3 id=\"5-1-什么是发布和订阅\"><a href=\"#5-1-什么是发布和订阅\" class=\"headerlink\" title=\"5.1 什么是发布和订阅\"></a>5.1 什么是发布和订阅</h3><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<h3 id=\"5-2-Redis的发布和订阅\"><a href=\"#5-2-Redis的发布和订阅\" class=\"headerlink\" title=\"5.2 Redis的发布和订阅\"></a>5.2 Redis的发布和订阅</h3><p>1、客户端可以订阅频道如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8236b0a496885035e56ac4a97ed3aac7.png\"></p>\n<p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f30c3b75f9cd2087a44446efa466eb7c.png\"></p>\n<h3 id=\"5-3-发布订阅命令行实现\"><a href=\"#5-3-发布订阅命令行实现\" class=\"headerlink\" title=\"5.3 发布订阅命令行实现\"></a>5.3 发布订阅命令行实现</h3><p>1、 打开一个客户端订阅channel1</p>\n<p>SUBSCRIBE channel1</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f7255703c15e9d662054b475798c84a3.png\"></p>\n<p>2、打开另一个客户端，给channel1发布消息hello</p>\n<p>publish channel1 hello</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f5dffee612db608296c2be72a6575483.png\"></p>\n<p>返回的1是订阅者数量</p>\n<p>3、打开第一个客户端可以看到发送的消息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1bae0b24066de71790f5859fab2b16cf.png\"></p>\n<p>注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p>\n<h2 id=\"6-Redis新数据类型\"><a href=\"#6-Redis新数据类型\" class=\"headerlink\" title=\"6.Redis新数据类型\"></a>6.Redis新数据类型</h2><h3 id=\"6-1-Bitmaps\"><a href=\"#6-1-Bitmaps\" class=\"headerlink\" title=\"6.1 Bitmaps\"></a>6.1 Bitmaps</h3><h4 id=\"6-1-1-简介\"><a href=\"#6-1-1-简介\" class=\"headerlink\" title=\"6.1.1 简介\"></a>6.1.1 简介</h4><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/486a5dc0e8859a07e30e23dc72d529a4.png\"></p>\n<p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p>\n<p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p>\n<ol>\n<li>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</li>\n<li>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3dfabf8634d0902c857db74ddd245cd0.png\"></p>\n<h4 id=\"6-1-2-命令\"><a href=\"#6-1-2-命令\" class=\"headerlink\" title=\"6.1.2 命令\"></a>6.1.2 命令</h4><p>1、setbit</p>\n<p>（1）格式</p>\n<p>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;设置Bitmaps中某个偏移量的值（0或1）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/94499e9d23092cf68b8658ddfe89023f.png\"></p>\n<p>*offset:偏移量从0开始</p>\n<p>（2）实例</p>\n<p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p>\n<p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8e65feffe91cdace5efeb188a1e62a3a.png\"></p>\n<p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/4bd5af4bc7117cf04d58ef53d9a2b492.png\"></p>\n<p>注：</p>\n<p>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p>\n<p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p>\n<p>2、getbit</p>\n<p>（1）格式</p>\n<p>getbit&lt;key&gt;&lt;offset&gt;获取Bitmaps中某个偏移量的值</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d8c708dac079cdffc24d9b1b726bcd1b.png\"></p>\n<p>获取键的第offset位的值（从0开始算）</p>\n<p>（2）实例</p>\n<p>获取id&#x3D;8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/86cbc072b97b8eee1c1ec3cedd33820a.png\"></p>\n<p>注：因为100根本不存在，所以也是返回0</p>\n<p>3、bitcount</p>\n<p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p>\n<p>（1）格式</p>\n<p>bitcount&lt;key&gt;[start end] 统计字符串从start字节到end字节比特值为1的数量</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ed5b55ff444131acd25fa6c16445a945.png\"></p>\n<p>（2）实例</p>\n<p>计算2022-11-06这天的独立访问用户数量</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/778883c723fc00da330ba0dee7a234fe.png\"></p>\n<p>start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/43ea78d7035aff0a6cafd5755373e5f9.png\"></p>\n<p>举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</p>\n<p>bitcount K1 1 2 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000</p>\n<p>--》bitcount K1 1 2 –》1</p>\n<p>bitcount K1 1 3 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000 00100001</p>\n<p>--》bitcount K1 1 3 –》3</p>\n<p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit&#x3D;1的个数，即01000001 01000000 00000000</p>\n<p>--》bitcount K1 0 -2 –》3</p>\n<p>注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p>\n<p>4、bitop</p>\n<p>(1)格式</p>\n<p>bitop and(or&#x2F;not&#x2F;xor) &lt;destkey&gt; [key…]</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/6ad09263470db60471bfca52c613ca12.png\"></p>\n<p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p>\n<p>(2)实例</p>\n<p>2020-11-04 日访问网站的userid&#x3D;1,2,5,9。</p>\n<p>setbit unique:users:20201104 1 1</p>\n<p>setbit unique:users:20201104 2 1</p>\n<p>setbit unique:users:20201104 5 1</p>\n<p>setbit unique:users:20201104 9 1</p>\n<p>2020-11-03 日访问网站的userid&#x3D;0,1,4,9。</p>\n<p>setbit unique:users:20201103 0 1</p>\n<p>setbit unique:users:20201103 1 1</p>\n<p>setbit unique:users:20201103 4 1</p>\n<p>setbit unique:users:20201103 9 1</p>\n<p>计算出两天都访问过网站的用户数量</p>\n<p>bitop and unique:users:and:20201104_03</p>\n<p>unique:users:20201103unique:users:20201104</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b9262118982fa327dbe138f9122e72e4.png\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9c78356cc99384f3549131602abfa459.png\"></p>\n<p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f24374f222743fa7e72c05a4c7374f8a.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"6-1-3-Bitmaps与set对比\"><a href=\"#6-1-3-Bitmaps与set对比\" class=\"headerlink\" title=\"6.1.3 Bitmaps与set对比\"></a>6.1.3 Bitmaps与set对比</h4><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p>\n<table>\n<thead>\n<tr>\n<th>set和Bitmaps存储一天活跃用户对比</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据 类型</td>\n<td>每个用户id占用空间</td>\n<td>需要存储的用户量</td>\n<td>全部内存量</td>\n</tr>\n<tr>\n<td>集合 类型</td>\n<td>64位</td>\n<td>50000000</td>\n<td>64位*50000000 &#x3D; 400MB</td>\n</tr>\n<tr>\n<td>Bitmaps</td>\n<td>1位</td>\n<td>100000000</td>\n<td>1位*100000000 &#x3D; 12.5MB</td>\n</tr>\n</tbody></table>\n<p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p>\n<table>\n<thead>\n<tr>\n<th>set和Bitmaps存储独立用户空间对比</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据类型</td>\n<td>一天</td>\n<td>一个月</td>\n<td>一年</td>\n</tr>\n<tr>\n<td>集合类型</td>\n<td>400MB</td>\n<td>12GB</td>\n<td>144GB</td>\n</tr>\n<tr>\n<td>Bitmaps</td>\n<td>12.5MB</td>\n<td>375MB</td>\n<td>4.5GB</td>\n</tr>\n</tbody></table>\n<p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p>\n<table>\n<thead>\n<tr>\n<th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据类型</td>\n<td>每个userid占用空间</td>\n<td>需要存储的用户量</td>\n<td>全部内存量</td>\n</tr>\n<tr>\n<td>集合类型</td>\n<td>64位</td>\n<td>100000</td>\n<td>64位*100000 &#x3D; 800KB</td>\n</tr>\n<tr>\n<td>Bitmaps</td>\n<td>1位</td>\n<td>100000000</td>\n<td>1位*100000000 &#x3D; 12.5MB</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-2-HyperLogLog\"><a href=\"#6-2-HyperLogLog\" class=\"headerlink\" title=\"6.2 HyperLogLog\"></a>6.2 HyperLogLog</h3><h4 id=\"6-2-1-简介\"><a href=\"#6-2-1-简介\" class=\"headerlink\" title=\"6.2.1 简介\"></a>6.2.1 简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p>\n<p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>\n<p>解决基数问题有很多种方案：</p>\n<p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p>\n<p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p>\n<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>\n<p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<p>什么是基数?</p>\n<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\n<h4 id=\"6-2-2-命令\"><a href=\"#6-2-2-命令\" class=\"headerlink\" title=\"6.2.2 命令\"></a>6.2.2 命令</h4><p>1、pfadd</p>\n<p>（1）格式</p>\n<p>pfadd &lt;key&gt;&lt; element&gt; [element …] 添加指定元素到 HyperLogLog 中</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/465bde4a61e93c5290e5bd59a8b658bd.png\"></p>\n<p>（2）实例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/54c0ba8a6ecc5c5a5e704ebb9c7a7b6a.png\"></p>\n<p>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p>\n<p>2、pfcount</p>\n<p>（1）格式</p>\n<p>pfcount&lt;key&gt; [key …] <strong>计算HLL的近似基数</strong>，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/648c85f98e411d70d61b713efbfc9eb4.png\"></p>\n<p>（2）实例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/65e0b7d89498b782fd24caa4388aac64.png\"></p>\n<p>3、pfmerge</p>\n<p>（1）格式</p>\n<p>pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f353aa50ff1a40e7930996422c6f6462.png\"></p>\n<p>（2）实例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/dc35356d3d250ec59b777991d70f2439.png\"></p>\n<h3 id=\"6-3-Geospatial\"><a href=\"#6-3-Geospatial\" class=\"headerlink\" title=\"6.3 Geospatial\"></a>6.3 Geospatial</h3><h4 id=\"6-3-1-简介\"><a href=\"#6-3-1-简介\" class=\"headerlink\" title=\"6.3.1 简介\"></a>6.3.1 简介</h4><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>\n<h4 id=\"6-3-2-命令\"><a href=\"#6-3-2-命令\" class=\"headerlink\" title=\"6.3.2 命令\"></a>6.3.2 命令</h4><p>1、geoadd</p>\n<p>（1）格式</p>\n<p>geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member…] 添加地理位置（经度，纬度，名称）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/05898acb750486aeb01954f2da42000c.png\"></p>\n<p>（2）实例</p>\n<p>geoadd china:city 121.47 31.23 shanghai</p>\n<p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f07118b80d8d8fe4c1d2a5600642c5d7.png\"></p>\n<p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p>\n<p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p>\n<p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p>\n<p>已经添加的数据，是无法再次往里面添加的。</p>\n<p>2、geopos</p>\n<p>（1）格式</p>\n<p>geopos &lt;key&gt;&lt;member&gt; [member…] 获得指定地区的坐标值</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2caf205b01e0a0dd51633a2610bc19ec.png\"></p>\n<p>（2）实例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/350d79b4ef10175a95da578ffbb7a121.png\"></p>\n<p>3、geodist</p>\n<p>（1）格式</p>\n<p>geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ] 获取两个位置之间的直线距离</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/12cb45e78dfac2bf774026c398d50a0c.png\"></p>\n<p>（2）实例</p>\n<p>获取两个位置之间的直线距离</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/427a0e5726f26945214c928b46695416.png\"></p>\n<p>单位：</p>\n<p>m 表示单位为米[默认值]。</p>\n<p>km 表示单位为千米。</p>\n<p>mi 表示单位为英里。</p>\n<p>ft 表示单位为英尺。</p>\n<p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p>\n<p>4、georadius</p>\n<p>（1）格式</p>\n<p>georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi 以给定的经纬度为中心，找出某一半径内的元素</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f7c9561aa56fcf09b6b900df5ef5e514.png\"></p>\n<p>经度 纬度 距离 单位</p>\n<p>（2）实例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/58e3d5054958e2e8b639c7342c508ab6.png\"></p>\n<h2 id=\"7-Redis-Jedis-测试\"><a href=\"#7-Redis-Jedis-测试\" class=\"headerlink\" title=\"7.Redis_Jedis_测试\"></a>7.Redis_Jedis_测试</h2><h3 id=\"7-1-Jedis所需要的jar包\"><a href=\"#7-1-Jedis所需要的jar包\" class=\"headerlink\" title=\"7.1 Jedis所需要的jar包\"></a>7.1 Jedis所需要的jar包</h3><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">&lt;dependency&gt; </span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt; </span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt; </span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;version&gt;3.2.0&lt;/version&gt; </span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;/dependency&gt;</span></span></code></pre></div><h3 id=\"7-2-连接Redis注意事项\"><a href=\"#7-2-连接Redis注意事项\" class=\"headerlink\" title=\"7.2 连接Redis注意事项\"></a>7.2 连接Redis注意事项</h3><p>禁用Linux的防火墙：Linux(CentOS7)里执行命令</p>\n<p><strong>systemctl stop&#x2F;disable firewalld.service</strong></p>\n<p>redis.conf中<strong>注释掉bind 127.0.0.1 ,然后 protected-mode no</strong></p>\n<h3 id=\"7-3-Jedis常用操作\"><a href=\"#7-3-Jedis常用操作\" class=\"headerlink\" title=\"7.3 Jedis常用操作\"></a>7.3 Jedis常用操作</h3><h4 id=\"7-3-1-创建动态的工程\"><a href=\"#7-3-1-创建动态的工程\" class=\"headerlink\" title=\"7.3.1 创建动态的工程\"></a>7.3.1 创建动态的工程</h4><p>maven</p>\n<h4 id=\"7-3-2-创建测试程序\"><a href=\"#7-3-2-创建测试程序\" class=\"headerlink\" title=\"7.3.2 创建测试程序\"></a>7.3.2 创建测试程序</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">package</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">atguigu</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">jedis</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">redis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">clients</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Demo01</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #BABED8\"> jedis </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Jedis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">192.168.137.3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">6379</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> pong </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ping</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">连接成功：</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">pong</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h3 id=\"7-4-测试相关数据类型\"><a href=\"#7-4-测试相关数据类型\" class=\"headerlink\" title=\"7.4 测试相关数据类型\"></a>7.4 测试相关数据类型</h3><h4 id=\"7-4-1-Jedis-API-Key\"><a href=\"#7-4-1-Jedis-API-Key\" class=\"headerlink\" title=\"7.4.1 Jedis-API: Key\"></a>7.4.1 Jedis-API: Key</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> keys </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">keys</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">*</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">keys</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> keys</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">exists</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ttl</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #BABED8\">                </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span></code></pre></div><h4 id=\"7-4-2-Jedis-API-String\"><a href=\"#7-4-2-Jedis-API-String\" class=\"headerlink\" title=\"7.4.2 Jedis-API: String\"></a>7.4.2 Jedis-API: String</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">mset</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">mget</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">str3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span></code></pre></div><h4 id=\"7-4-3-Jedis-API-List\"><a href=\"#7-4-3-Jedis-API-List\" class=\"headerlink\" title=\"7.4.3 Jedis-API: List\"></a>7.4.3 Jedis-API: List</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">lrange</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">mylist</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> element </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">element</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h4 id=\"7-4-4-Jedis-API-set\"><a href=\"#7-4-4-Jedis-API-set\" class=\"headerlink\" title=\"7.4.4 Jedis-API: set\"></a>7.4.4 Jedis-API: set</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">order01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">order02</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">order03</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">order04</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> smembers </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">smembers</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> order </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> smembers</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">order</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">srem</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">orders</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">order02</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><h4 id=\"7-4-5-Jedis-API-hash\"><a href=\"#7-4-5-Jedis-API-hash\" class=\"headerlink\" title=\"7.4.5 Jedis-API: hash\"></a>7.4.5 Jedis-API: hash</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hset</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hash1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">userName</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lisi</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hget</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hash1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">userName</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> map </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">telphone</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">13810169999</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">address</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">email</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">abc@163.com</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hmset</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hash2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hmget</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hash2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">telphone</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">email</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> element </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">element</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h4 id=\"7-4-6-Jedis-API-zset\"><a href=\"#7-4-6-Jedis-API-zset\" class=\"headerlink\" title=\"7.4.6 Jedis-API: zset\"></a>7.4.6 Jedis-API: zset</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">zadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">zset01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">100d</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">z3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">zadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">zset01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">90d</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">l4</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">zadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">zset01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">80d</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">w5</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">zadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">zset01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">70d</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">z6</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> zrange </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">zrange</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">zset01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> e </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> zrange</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"8-Redis-Jedis-实例\"><a href=\"#8-Redis-Jedis-实例\" class=\"headerlink\" title=\"8.Redis_Jedis_实例\"></a>8.Redis_Jedis_实例</h2><h3 id=\"8-1-完成一个手机验证码功能\"><a href=\"#8-1-完成一个手机验证码功能\" class=\"headerlink\" title=\"8.1 完成一个手机验证码功能\"></a>8.1 完成一个手机验证码功能</h3><p>要求：</p>\n<p>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</p>\n<p>2、输入验证码，点击验证，返回成功或失败</p>\n<p>3、每个手机号每天只能输入3次</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/4c6b4fc336e822d77cef9bd12b9c579d.jpeg\"></p>\n<p><strong>案例分析</strong>：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/image-20231122155430455.png\" style=\"zoom: 50%;\" />\n\n<p><strong>代码实现</strong>：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">PhoneCode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//        String code = getCode();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//        System.out.println(code);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//模拟验证码发送</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">verifyCode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">13678765435</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//校验</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//        getRedisCode(&quot;13678765435&quot;,&quot;986260&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//1、生成6位数字验证码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getCode</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Random</span><span style=\"color: #BABED8\"> random </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Random</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> code </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> rand </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> random</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">nextInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            code </span><span style=\"color: #89DDFF\">+=</span><span style=\"color: #BABED8\"> rand</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> code</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//2、每个手机每天只能发送三次，验证码放到redis中，设置过期时间120</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">verifyCode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">phone</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//连接redis</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #BABED8\"> jedis </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Jedis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">127.0.0.1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">6379</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//拼接key</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//手机发送次数key</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> countKey </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">VerifyCode</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> phone </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:count</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//验证码key</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> codeKey </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">VerifyCode</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> phone </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:code</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//每个手机每天只能发送三次</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> count </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">countKey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">count </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">//没有发送次数，第一次发送</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">//设置发送次数是1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setex</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">countKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">24</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">60</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">60</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Integer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parseInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">count</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">//发送次数+1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">incr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">codeKey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Integer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parseInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">count</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">//发送三次，不能在发送</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">今日发送次数已经超过三次</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//发送验证码到redis里面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> vcode </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getCode</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setex</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">codeKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">120</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> vcode</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//3、验证码校验</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getRedisCode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">phone</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">code</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//从redis获取验证码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #BABED8\"> jedis </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Jedis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">127.0.0.1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">6379</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//验证码key</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> codeKey </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">VerifyCode</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> phone </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:code</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> redisCode </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">codeKey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//判断</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">redisCode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">code</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">成功</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">失败</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>过程截图</strong>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/image-20231122170318709.png\"></p>\n<h2 id=\"9-Redis与Spring-Boot整合\"><a href=\"#9-Redis与Spring-Boot整合\" class=\"headerlink\" title=\"9.Redis与Spring Boot整合\"></a>9.Redis与Spring Boot整合</h2><p>Spring Boot整合Redis非常简单，只需要按如下步骤整合即可</p>\n<h3 id=\"9-1-整合步骤\"><a href=\"#9-1-整合步骤\" class=\"headerlink\" title=\"9.1 整合步骤\"></a>9.1 整合步骤</h3><p>1、在pom.xml文件中引入redis相关依赖</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">&lt;!-- redis --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;dependency&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;/dependency&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;dependency&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &lt;version&gt;2.6.0&lt;/version&gt;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&lt;/dependency&gt;</span></span></code></pre></div><p>2、application.properties配置redis配置</p>\n<div class=\"language-properties\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">properties</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#Redis服务器地址</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.host</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">127.0.0.1</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#Redis服务器连接端口</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.port</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">6379</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#Redis数据库索引（默认为0）</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.database</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> 0</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#连接超时时间（毫秒）</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.timeout</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">1800000</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#连接池最大连接数（使用负值表示没有限制）</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.lettuce.pool.max-active</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">20</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#最大阻塞等待时间(负数表示没限制)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.lettuce.pool.max-wait</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">-1</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#连接池中的最大空闲连接</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.lettuce.pool.max-idle</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">5</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#连接池中的最小空闲连接</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.redis.lettuce.pool.min-idle</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">0</span></span></code></pre></div><p>3、添加redis配置类</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">EnableCaching</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Configuration</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RedisConfig</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">CachingConfigurerSupport</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Bean</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">RedisTemplate</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">redisTemplate</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">RedisConnectionFactory</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">factory</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">RedisTemplate</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> template </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">RedisTemplate</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">RedisSerializer</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> redisSerializer </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">StringRedisSerializer</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Jackson2JsonRedisSerializer</span><span style=\"color: #BABED8\"> jackson2JsonRedisSerializer </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Object</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">class</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ObjectMapper</span><span style=\"color: #BABED8\"> om </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ObjectMapper</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        om</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setVisibility</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">PropertyAccessor</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ALL</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> JsonAutoDetect</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">Visibility</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ANY</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        om</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">enableDefaultTyping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">ObjectMapper</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">DefaultTyping</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">NON_FINAL</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setObjectMapper</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">om</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        template</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setConnectionFactory</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">factory</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//key序列化方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        template</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setKeySerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">redisSerializer</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//value序列化</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        template</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setValueSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//value hashmap序列化</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        template</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setHashValueSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> template</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Bean</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">CacheManager</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">cacheManager</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">RedisConnectionFactory</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">factory</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">RedisSerializer</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> redisSerializer </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">StringRedisSerializer</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Jackson2JsonRedisSerializer</span><span style=\"color: #BABED8\"> jackson2JsonRedisSerializer </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Object</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">class</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//解决查询缓存转换异常的问题</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ObjectMapper</span><span style=\"color: #BABED8\"> om </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ObjectMapper</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        om</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setVisibility</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">PropertyAccessor</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ALL</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> JsonAutoDetect</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">Visibility</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ANY</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        om</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">enableDefaultTyping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">ObjectMapper</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">DefaultTyping</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">NON_FINAL</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setObjectMapper</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">om</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">RedisCacheConfiguration</span><span style=\"color: #BABED8\"> config </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> RedisCacheConfiguration</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">defaultCacheConfig</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">entryTtl</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Duration</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ofSeconds</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">600</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">serializeKeysWith</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">RedisSerializationContext</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SerializationPair</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">fromSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">redisSerializer</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">serializeValuesWith</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">RedisSerializationContext</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SerializationPair</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">fromSerializer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jackson2JsonRedisSerializer</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">disableCachingNullValues</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">RedisCacheManager</span><span style=\"color: #BABED8\"> cacheManager </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> RedisCacheManager</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">builder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">factory</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">cacheDefaults</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">config</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> cacheManager</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>4、测试一下</p>\n<p>RedisTestController中添加测试方法</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/redisTest</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RedisTestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Autowired</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">RedisTemplate</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">GetMapping</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">testRedis</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//设置值到redis</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lucy</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//从redis获取值</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">String</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"10-Redis-事务-锁机制-秒杀\"><a href=\"#10-Redis-事务-锁机制-秒杀\" class=\"headerlink\" title=\"10.Redis_事务_锁机制_秒杀\"></a>10.Redis_事务_锁机制_秒杀</h2><h3 id=\"10-1-Redis的事务定义\"><a href=\"#10-1-Redis的事务定义\" class=\"headerlink\" title=\"10.1 Redis的事务定义\"></a>10.1 Redis的事务定义</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/03372d3e8cc9f459c92d9e16cf0f776c.jpeg\"></p>\n<p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>\n<p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p>\n<h3 id=\"10-2-Multi、Exec、discard\"><a href=\"#10-2-Multi、Exec、discard\" class=\"headerlink\" title=\"10.2 Multi、Exec、discard\"></a>10.2 Multi、Exec、discard</h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p>\n<p>组队的过程中可以通过discard来放弃组队。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9e04754de7a35fb9dfbc4ace98efc83a.png\"></p>\n<p><strong>案例：</strong></p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/723ff998b90887c2fa79f6c774b21751.jpeg\"> 组队成功，提交成功</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/576c3602b4992e16045bb48089582c34.jpeg\"> 组队阶段报错，提交失败</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/af7ec99be21432d98d6df9528cac7705.jpeg\"> 组队成功，提交有成功有失败情况</td>\n</tr>\n</tbody></table>\n<h3 id=\"10-3-事务的错误处理\"><a href=\"#10-3-事务的错误处理\" class=\"headerlink\" title=\"10.3 事务的错误处理\"></a>10.3 事务的错误处理</h3><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/50ee4f81abd6a0fcfafd87156346a4a5.jpeg\"></p>\n<p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/dfc1c719e2ba5f7b2fb528b93a8b5ecb.jpeg\"></p>\n<h3 id=\"10-4-为什么要做成事务\"><a href=\"#10-4-为什么要做成事务\" class=\"headerlink\" title=\"10.4 为什么要做成事务\"></a>10.4 为什么要做成事务</h3><p>想想一个场景：有很多人有你的账户,同时去参加双十一抢购</p>\n<h3 id=\"10-5-事务冲突的问题\"><a href=\"#10-5-事务冲突的问题\" class=\"headerlink\" title=\"10.5 事务冲突的问题\"></a>10.5 事务冲突的问题</h3><h4 id=\"10-5-1-例子\"><a href=\"#10-5-1-例子\" class=\"headerlink\" title=\"10.5.1 例子\"></a>10.5.1 例子</h4><p>一个请求想给金额减8000</p>\n<p>一个请求想给金额减5000</p>\n<p>一个请求想给金额减1000</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/99bd6955d1daa466bc2f2a037fd6de0c.jpeg\"></p>\n<h4 id=\"10-5-2-悲观锁\"><a href=\"#10-5-2-悲观锁\" class=\"headerlink\" title=\"10.5.2 悲观锁\"></a>10.5.2 悲观锁</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/43916e80cdc8af20e56de3e8f0aa5f39.jpeg\"></p>\n<p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p>\n<h4 id=\"10-5-3-乐观锁\"><a href=\"#10-5-3-乐观锁\" class=\"headerlink\" title=\"10.5.3 乐观锁\"></a>10.5.3 乐观锁</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/06eee96b57d8dfb6fd066d985b327a62.jpeg\"></p>\n<p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p>\n<h4 id=\"10-5-4-WATCH-key-key-…\"><a href=\"#10-5-4-WATCH-key-key-…\" class=\"headerlink\" title=\"10.5.4 WATCH key [key …]\"></a>10.5.4 WATCH key [key …]</h4><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<strong>执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/421240d9e20424863f7ebd70ebcd2824.jpeg\"></p>\n<h4 id=\"10-5-5-unwatch\"><a href=\"#10-5-5-unwatch\" class=\"headerlink\" title=\"10.5.5 unwatch\"></a>10.5.5 unwatch</h4><p>取消 WATCH 命令对所有 key 的监视。</p>\n<p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p>\n<p><a href=\"http://doc.redisfans.com/transaction/exec.html\">http://doc.redisfans.com/transaction/exec.html</a></p>\n<h3 id=\"10-6-Redis事务三特性\"><a href=\"#10-6-Redis事务三特性\" class=\"headerlink\" title=\"10.6 Redis事务三特性\"></a>10.6 Redis事务三特性</h3><ul>\n<li>单独的隔离操作<ul>\n<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n</ul>\n</li>\n<li>没有隔离级别的概念<ul>\n<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>\n</ul>\n</li>\n<li>不保证原子性<ul>\n<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-Redis-事务-秒杀案例\"><a href=\"#11-Redis-事务-秒杀案例\" class=\"headerlink\" title=\"11.Redis_事务_秒杀案例\"></a>11.Redis_事务_秒杀案例</h2><h3 id=\"11-1-解决计数器和人员记录的事务操作\"><a href=\"#11-1-解决计数器和人员记录的事务操作\" class=\"headerlink\" title=\"11.1 解决计数器和人员记录的事务操作\"></a>11.1 解决计数器和人员记录的事务操作</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b69cc5d65aba81b6230d412f058b009d.jpeg\"></p>\n<h3 id=\"11-2-Redis事务–秒杀并发模拟\"><a href=\"#11-2-Redis事务–秒杀并发模拟\" class=\"headerlink\" title=\"11.2 Redis事务–秒杀并发模拟\"></a>11.2 Redis事务–秒杀并发模拟</h3><p>使用工具ab模拟测试</p>\n<p>CentOS6 默认安装</p>\n<p>CentOS7需要手动安装</p>\n<h4 id=\"11-2-1-联网：yum-install-httpd-tools\"><a href=\"#11-2-1-联网：yum-install-httpd-tools\" class=\"headerlink\" title=\"11.2.1 联网：yum install httpd-tools\"></a>11.2.1 联网：yum install httpd-tools</h4><h4 id=\"11-2-2-无网络\"><a href=\"#11-2-2-无网络\" class=\"headerlink\" title=\"11.2.2 无网络\"></a>11.2.2 无网络</h4><p>（1） 进入cd &#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64&#x2F;Packages（路径跟centos6不同）</p>\n<p>（2） 顺序安装</p>\n<p>apr-1.4.8-3.el7.x86_64.rpm</p>\n<p>apr-util-1.5.2-6.el7.x86_64.rpm</p>\n<p>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</p>\n<h4 id=\"11-2-3-测试及结果\"><a href=\"#11-2-3-测试及结果\" class=\"headerlink\" title=\"11.2.3 测试及结果\"></a>11.2.3 测试及结果</h4><h5 id=\"11-2-3-1-通过ab测试\"><a href=\"#11-2-3-1-通过ab测试\" class=\"headerlink\" title=\"11.2.3.1 通过ab测试\"></a>11.2.3.1 通过ab测试</h5><p>vim postfile 模拟表单提交参数,以&amp;符号结尾;存放当前目录。</p>\n<p>内容：prodid&#x3D;0101&amp;</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">ab</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-n</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2000</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-c</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">200</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-k</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">~/postfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-T</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">application/x-www-form-urlencoded</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">http://192.168.2.115:8081/Seckill/doseckill</span></span></code></pre></div><h5 id=\"11-2-3-2-超卖\"><a href=\"#11-2-3-2-超卖\" class=\"headerlink\" title=\"11.2.3.2 超卖\"></a>11.2.3.2 超卖</h5><table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9dc298e40bc51bd12fe92c93bc5f8694.jpeg\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/28ed672aa6883f60d839eb043992dea3.jpeg\"></th>\n</tr>\n</thead>\n</table>\n<h3 id=\"11-3-超卖问题\"><a href=\"#11-3-超卖问题\" class=\"headerlink\" title=\"11.3 超卖问题\"></a>11.3 超卖问题</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/40e725c44be0391fb9be384060fdd79f.jpeg\"></p>\n<h3 id=\"11-4-利用乐观锁淘汰用户，解决超卖问题。\"><a href=\"#11-4-利用乐观锁淘汰用户，解决超卖问题。\" class=\"headerlink\" title=\"11.4 利用乐观锁淘汰用户，解决超卖问题。\"></a>11.4 利用乐观锁淘汰用户，解决超卖问题。</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/269d260a3424acdf534e8f1d8927dce9.jpeg\"></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//增加乐观锁</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">watch</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//3.判断库存</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> qtkeystr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkeystr</span><span style=\"color: #89DDFF\">==null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkeystr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">trim</span><span style=\"color: #89DDFF\">()))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">未初始化库存</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> qt </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Integer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parseInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkeystr</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qt</span><span style=\"color: #89DDFF\">&lt;=</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">err</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">已经秒光</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//增加事务</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Transaction</span><span style=\"color: #BABED8\"> multi </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">multi</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//4.减少库存</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//jedis.decr(qtkey);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">multi</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">decr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">qtkey</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//5.加人</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//jedis.sadd(usrkey, uid);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">multi</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">usrkey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> uid</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//执行事务</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Object</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> multi</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">exec</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//判断事务提交是否失败</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list</span><span style=\"color: #89DDFF\">==null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()==</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">秒杀失败</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">err</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">秒杀成功</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">close</span><span style=\"color: #89DDFF\">();</span></span></code></pre></div><table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/c6a489602db7cc20e9f185b51af851de.jpeg\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b0e34498072e18a6ae699c5578e61852.jpeg\"></th>\n</tr>\n</thead>\n</table>\n<h3 id=\"11-5-继续增加并发测试\"><a href=\"#11-5-继续增加并发测试\" class=\"headerlink\" title=\"11.5 继续增加并发测试\"></a>11.5 继续增加并发测试</h3><h4 id=\"11-5-1-连接有限制\"><a href=\"#11-5-1-连接有限制\" class=\"headerlink\" title=\"11.5.1 连接有限制\"></a>11.5.1 连接有限制</h4><div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">ab</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-n</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2000</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-c</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">200</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-k</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">postfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-T</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">application/x-www-form-urlencoded</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">http://192.168.140.1:8080/seckill/doseckill</span></span></code></pre></div><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f38dad7cf5428596b4602138464bf84d.jpeg\" style=\"zoom: 150%;\" />\n\n<p>增加-r参数，-r Don’t exit on socket receive errors.</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">ab</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-n</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2000</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-c</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-r</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">postfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-T</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">application/x-www-form-urlencoded</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">http://192.168.140.1:8080/seckill/doseckill</span></span></code></pre></div><h4 id=\"11-5-2-已经秒光，可是还有库存\"><a href=\"#11-5-2-已经秒光，可是还有库存\" class=\"headerlink\" title=\"11.5.2 已经秒光，可是还有库存\"></a>11.5.2 已经秒光，可是还有库存</h4><p>ab -n 2000 -c 100 -p postfile -T ‘application&#x2F;x-www-form-urlencoded’ <a href=\"http://192.168.137.1:8080/seckill/doseckill\">http://192.168.137.1:8080/seckill/doseckill</a></p>\n<p>已经秒光，可是还有库存。原因，就是<strong>乐观锁导致很多请求都失败</strong>。先点的没秒到，后点的可能秒到了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1d419c7e71f370bb82d699efbeb1a0d5.jpeg\"></p>\n<h4 id=\"11-5-3-连接超时，通过连接池解决\"><a href=\"#11-5-3-连接超时，通过连接池解决\" class=\"headerlink\" title=\"11.5.3 连接超时，通过连接池解决\"></a>11.5.3 连接超时，通过连接池解决</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/110cbbaf3bcb4ca9407f0ff6b684f438.jpeg\"></p>\n<h4 id=\"11-5-4-连接池\"><a href=\"#11-5-4-连接池\" class=\"headerlink\" title=\"11.5.4 连接池\"></a>11.5.4 连接池</h4><p>节省每次连接redis服务带来的消耗，把连接好的实例反复利用。</p>\n<p>通过参数管理连接的行为</p>\n<p>代码见项目中</p>\n<ul>\n<li>链接池参数<ul>\n<li>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。</li>\n<li>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</li>\n<li>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；</li>\n<li>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11-6-解决库存遗留问题\"><a href=\"#11-6-解决库存遗留问题\" class=\"headerlink\" title=\"11.6 解决库存遗留问题\"></a>11.6 解决库存遗留问题</h3><h4 id=\"11-6-1-LUA脚本\"><a href=\"#11-6-1-LUA脚本\" class=\"headerlink\" title=\"11.6.1 LUA脚本\"></a>11.6.1 LUA脚本</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a26b8676b44a3ed4f3692753945c0897.jpeg\"></p>\n<p>Lua 是一个小巧的<a href=\"http://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80\">脚本语言</a>，Lua脚本可以很容易的被C&#x2F;C++ 代码调用，也可以反过来调用C&#x2F;C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为<strong>嵌入式脚本语言</strong>。</p>\n<p>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p>\n<p>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p>\n<p><a href=\"https://www.w3cschool.cn/lua/\">https://www.w3cschool.cn/lua/</a></p>\n<h4 id=\"11-6-2-LUA脚本在Redis中的优势\"><a href=\"#11-6-2-LUA脚本在Redis中的优势\" class=\"headerlink\" title=\"11.6.2 LUA脚本在Redis中的优势\"></a>11.6.2 LUA脚本在Redis中的优势</h4><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p>\n<p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p>\n<p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p>\n<p>利用lua脚本淘汰用户，解决超卖问题。</p>\n<p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/94fd2074f356e1a9bf0f7106ed6a63d6.jpeg\"></p>\n<h3 id=\"11-7-Redis-事务-秒杀案例-代码\"><a href=\"#11-7-Redis-事务-秒杀案例-代码\" class=\"headerlink\" title=\"11.7 Redis_事务_秒杀案例_代码\"></a>11.7 Redis_事务_秒杀案例_代码</h3><h4 id=\"11-7-1-项目结构\"><a href=\"#11-7-1-项目结构\" class=\"headerlink\" title=\"11.7.1 项目结构\"></a>11.7.1 项目结构</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/88371e91681dc836637f803d0e4482c4.png\"></p>\n<h4 id=\"11-7-2-第一版：简单版\"><a href=\"#11-7-2-第一版：简单版\" class=\"headerlink\" title=\"11.7.2 第一版：简单版\"></a>11.7.2 第一版：简单版</h4><p>老师点10次，正常秒杀</p>\n<p>同学一起点试一试，秒杀也是正常的。这是因为还达不到并发的效果。</p>\n<p>使用工具ab模拟并发测试，会出现超卖情况。查看库存会出现负数。</p>\n<h4 id=\"11-7-3-第二版：加事务-乐观锁-解决超卖-但出现遗留库存和连接超时\"><a href=\"#11-7-3-第二版：加事务-乐观锁-解决超卖-但出现遗留库存和连接超时\" class=\"headerlink\" title=\"11.7.3 第二版：加事务-乐观锁(解决超卖),但出现遗留库存和连接超时\"></a>11.7.3 第二版：加事务-乐观锁(解决超卖),但出现遗留库存和连接超时</h4><h4 id=\"11-7-4-第三版：连接池解决超时问题\"><a href=\"#11-7-4-第三版：连接池解决超时问题\" class=\"headerlink\" title=\"11.7.4 第三版：连接池解决超时问题\"></a>11.7.4 第三版：连接池解决超时问题</h4><h4 id=\"11-7-5-第四版：解决库存依赖问题，LUA脚本\"><a href=\"#11-7-5-第四版：解决库存依赖问题，LUA脚本\" class=\"headerlink\" title=\"11.7.5 第四版：解决库存依赖问题，LUA脚本\"></a>11.7.5 第四版：解决库存依赖问题，LUA脚本</h4><div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">local</span><span style=\"color: #BABED8\"> userid</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">KEYS[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #C3E88D\">]</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">local</span><span style=\"color: #BABED8\"> prodid</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">KEYS[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #C3E88D\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">local</span><span style=\"color: #BABED8\"> qtkey</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sk:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">..prodid..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:qt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">local</span><span style=\"color: #BABED8\"> usersKey</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sk:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">..prodid.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:usr&#39;; </span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">local userExists=redis.call(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sismember</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">,usersKey,userid);</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">if tonumber(userExists)==1 then </span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  return 2;</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">end</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">local num= redis.call(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">get</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> ,qtkey);</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">if tonumber(num)&lt;=0 then </span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  return 0; </span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">else </span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  redis.call(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">decr</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">,qtkey);</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  redis.call(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sadd</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">,usersKey,userid);</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">end</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">return 1;</span></span></code></pre></div><h2 id=\"12-Redis持久化之RDB\"><a href=\"#12-Redis持久化之RDB\" class=\"headerlink\" title=\"12.Redis持久化之RDB\"></a>12.Redis持久化之RDB</h2><h3 id=\"12-1-总体介绍\"><a href=\"#12-1-总体介绍\" class=\"headerlink\" title=\"12.1 总体介绍\"></a>12.1 总体介绍</h3><p>官网介绍：<a href=\"http://www.redis.io/\">http://www.redis.io</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/16b36d43a9f92c24a1151dff394721a8.jpeg\"></p>\n<p>Redis 提供了2个不同形式的持久化方式。</p>\n<ul>\n<li>RDB（Redis DataBase）</li>\n<li>AOF（Append Of File）</li>\n</ul>\n<h3 id=\"12-2-RDB（Redis-DataBase）\"><a href=\"#12-2-RDB（Redis-DataBase）\" class=\"headerlink\" title=\"12.2 RDB（Redis DataBase）\"></a>12.2 RDB（Redis DataBase）</h3><h4 id=\"12-2-1-官网介绍\"><a href=\"#12-2-1-官网介绍\" class=\"headerlink\" title=\"12.2.1 官网介绍\"></a>12.2.1 官网介绍</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9fecb198750907a694ebd9a198804573.jpeg\"></p>\n<h4 id=\"12-2-2-是什么\"><a href=\"#12-2-2-是什么\" class=\"headerlink\" title=\"12.2.2 是什么\"></a>12.2.2 是什么</h4><p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p>\n<h4 id=\"12-2-3-备份是如何执行的\"><a href=\"#12-2-3-备份是如何执行的\" class=\"headerlink\" title=\"12.2.3 备份是如何执行的\"></a>12.2.3 备份是如何执行的</h4><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>。</p>\n<h4 id=\"12-2-4-Fork\"><a href=\"#12-2-4-Fork\" class=\"headerlink\" title=\"12.2.4 Fork\"></a>12.2.4 Fork</h4><ul>\n<li>Fork的作用是复制一个与当前进程<strong>一样的进程</strong>。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li>\n<li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</li>\n<li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li>\n</ul>\n<h4 id=\"12-2-5-RDB持久化流程\"><a href=\"#12-2-5-RDB持久化流程\" class=\"headerlink\" title=\"12.2.5 RDB持久化流程\"></a>12.2.5 RDB持久化流程</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f27fe78f6bb6740585e7a2d2ff145c38.png\"></p>\n<h4 id=\"12-2-6-dump-rdb文件\"><a href=\"#12-2-6-dump-rdb文件\" class=\"headerlink\" title=\"12.2.6 dump.rdb文件\"></a>12.2.6 dump.rdb文件</h4><p>在redis.conf中配置文件名称，默认为dump.rdb</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/6766a085e16eb1e12c6ccfd13d184a95.png\"></p>\n<h4 id=\"12-2-7-配置位置\"><a href=\"#12-2-7-配置位置\" class=\"headerlink\" title=\"12.2.7 配置位置\"></a>12.2.7 配置位置</h4><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p>\n<p>dir “&#x2F;myredis&#x2F;“</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b88f0d56c0cf54234dad59b4416cc7b7.png\"></p>\n<h4 id=\"12-2-8-如何触发RDB快照；保持策略\"><a href=\"#12-2-8-如何触发RDB快照；保持策略\" class=\"headerlink\" title=\"12.2.8 如何触发RDB快照；保持策略\"></a>12.2.8 如何触发RDB快照；保持策略</h4><h5 id=\"12-2-8-1-配置文件中默认的快照配置\"><a href=\"#12-2-8-1-配置文件中默认的快照配置\" class=\"headerlink\" title=\"12.2.8.1 配置文件中默认的快照配置\"></a>12.2.8.1 配置文件中默认的快照配置</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/52b156ebe5f61d8ba0e643005b874421.png\"></p>\n<h5 id=\"12-2-8-2-命令save-VS-bgsave\"><a href=\"#12-2-8-2-命令save-VS-bgsave\" class=\"headerlink\" title=\"12.2.8.2 命令save VS bgsave\"></a>12.2.8.2 命令save VS bgsave</h5><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p>\n<p><strong>bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</strong></p>\n<p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p>\n<h5 id=\"12-2-8-3-flushall命令\"><a href=\"#12-2-8-3-flushall命令\" class=\"headerlink\" title=\"12.2.8.3 flushall命令\"></a>12.2.8.3 flushall命令</h5><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p>\n<h5 id=\"12-2-8-4-SNAPSHOTTING快照\"><a href=\"#12-2-8-4-SNAPSHOTTING快照\" class=\"headerlink\" title=\"12.2.8.4 SNAPSHOTTING快照\"></a>12.2.8.4 SNAPSHOTTING快照</h5><h5 id=\"12-2-8-5-Save\"><a href=\"#12-2-8-5-Save\" class=\"headerlink\" title=\"12.2.8.5 Save\"></a>12.2.8.5 Save</h5><p>格式：save 秒钟 写操作次数</p>\n<p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p>\n<p><strong>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。</strong></p>\n<p><strong>禁用</strong></p>\n<p><strong>不设置save指令，或者给save传入空字符串</strong></p>\n<h5 id=\"12-2-8-6-stop-writes-on-bgsave-error\"><a href=\"#12-2-8-6-stop-writes-on-bgsave-error\" class=\"headerlink\" title=\"12.2.8.6 stop-writes-on-bgsave-error\"></a>12.2.8.6 stop-writes-on-bgsave-error</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1da2fcb3128cd2d02d5f29c5fd40e897.png\"></p>\n<p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p>\n<h5 id=\"12-2-8-7-rdbcompression-压缩文件\"><a href=\"#12-2-8-7-rdbcompression-压缩文件\" class=\"headerlink\" title=\"12.2.8.7 rdbcompression 压缩文件\"></a>12.2.8.7 rdbcompression 压缩文件</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3b2a12fd5d76673091f19ff38c2d2efc.png\"></p>\n<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用<strong>LZF算法</strong>进行压缩。</p>\n<p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p>\n<h5 id=\"12-2-8-8-rdbchecksum-检查完整性\"><a href=\"#12-2-8-8-rdbchecksum-检查完整性\" class=\"headerlink\" title=\"12.2.8.8 rdbchecksum 检查完整性\"></a>12.2.8.8 rdbchecksum 检查完整性</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f73e96c31982dec7f5cd3dd6087bf2ac.png\"></p>\n<p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p>\n<p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p>\n<p>推荐yes.</p>\n<h5 id=\"12-2-8-9-rdb的备份\"><a href=\"#12-2-8-9-rdb的备份\" class=\"headerlink\" title=\"12.2.8.9 rdb的备份\"></a>12.2.8.9 rdb的备份</h5><p>先通过config get dir 查询rdb文件的目录</p>\n<p>将*.rdb的文件拷贝到别的地方</p>\n<p>rdb的恢复</p>\n<ul>\n<li>关闭Redis</li>\n<li>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</li>\n<li>启动Redis, 备份数据会直接加载</li>\n</ul>\n<h4 id=\"12-2-9-优势\"><a href=\"#12-2-9-优势\" class=\"headerlink\" title=\"12.2.9 优势\"></a>12.2.9 优势</h4><ul>\n<li>适合大规模的数据恢复</li>\n<li>对数据完整性和一致性要求不高更适合使用</li>\n<li><strong>节省磁盘空间</strong></li>\n<li><strong>恢复速度快</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/91067be957eda9c3401a021aec021c97.jpeg\"></p>\n<h4 id=\"12-2-10-劣势\"><a href=\"#12-2-10-劣势\" class=\"headerlink\" title=\"12.2.10 劣势\"></a>12.2.10 劣势</h4><ul>\n<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>\n<li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li>\n<li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li>\n</ul>\n<h4 id=\"12-2-11-如何停止\"><a href=\"#12-2-11-如何停止\" class=\"headerlink\" title=\"12.2.11 如何停止\"></a>12.2.11 如何停止</h4><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p>\n<h4 id=\"12-2-12-小总结\"><a href=\"#12-2-12-小总结\" class=\"headerlink\" title=\"12.2.12 小总结\"></a>12.2.12 小总结</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f29d5ac99d60c07fa4496928b960edf9.jpeg\"></p>\n<h2 id=\"13-Redis持久化之AOF\"><a href=\"#13-Redis持久化之AOF\" class=\"headerlink\" title=\"13.Redis持久化之AOF\"></a>13.Redis持久化之AOF</h2><h3 id=\"13-1-AOF（Append-Only-File）\"><a href=\"#13-1-AOF（Append-Only-File）\" class=\"headerlink\" title=\"13.1 AOF（Append Only File）\"></a>13.1 AOF（Append Only File）</h3><h4 id=\"13-1-1-是什么\"><a href=\"#13-1-1-是什么\" class=\"headerlink\" title=\"13.1.1 是什么\"></a>13.1.1 是什么</h4><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>\n<h4 id=\"13-1-2-AOF持久化流程\"><a href=\"#13-1-2-AOF持久化流程\" class=\"headerlink\" title=\"13.1.2 AOF持久化流程\"></a>13.1.2 AOF持久化流程</h4><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p>\n<p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p>\n<p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p>\n<p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/dd6b0aa4b69f434e5e5c640f7754ef50.png\"></p>\n<h4 id=\"13-1-3-AOF默认不开启\"><a href=\"#13-1-3-AOF默认不开启\" class=\"headerlink\" title=\"13.1.3 AOF默认不开启\"></a>13.1.3 AOF默认不开启</h4><p>可以在redis.conf中配置文件名称，默认为 <strong>appendonly.aof</strong></p>\n<p>AOF文件的保存路径，同RDB的路径一致。</p>\n<h4 id=\"13-1-4-AOF和RDB同时开启，redis听谁的？\"><a href=\"#13-1-4-AOF和RDB同时开启，redis听谁的？\" class=\"headerlink\" title=\"13.1.4 AOF和RDB同时开启，redis听谁的？\"></a>13.1.4 AOF和RDB同时开启，redis听谁的？</h4><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p>\n<h4 id=\"13-1-5-AOF启动-修复-恢复\"><a href=\"#13-1-5-AOF启动-修复-恢复\" class=\"headerlink\" title=\"13.1.5 AOF启动&#x2F;修复&#x2F;恢复\"></a>13.1.5 AOF启动&#x2F;修复&#x2F;恢复</h4><ul>\n<li>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</li>\n<li>正常恢复<ul>\n<li>修改默认的appendonly no，改为yes</li>\n<li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li>\n<li>恢复：重启redis然后重新加载</li>\n</ul>\n</li>\n<li>异常恢复<ul>\n<li>修改默认的appendonly no，改为yes</li>\n<li>如遇到<strong>AOF文件损坏</strong>，通过&#x2F;usr&#x2F;local&#x2F;bin&#x2F;<strong>redis-check-aof–fix appendonly.aof</strong>进行恢复</li>\n<li>备份被写坏的AOF文件</li>\n<li>恢复：重启redis，然后重新加载</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13-1-6-AOF同步频率设置\"><a href=\"#13-1-6-AOF同步频率设置\" class=\"headerlink\" title=\"13.1.6 AOF同步频率设置\"></a>13.1.6 AOF同步频率设置</h4><p>appendfsync always</p>\n<p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p>\n<p>appendfsync everysec</p>\n<p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p>\n<p>appendfsync no</p>\n<p>redis不主动进行同步，把同步时机交给操作系统。</p>\n<h4 id=\"13-1-7-Rewrite压缩\"><a href=\"#13-1-7-Rewrite压缩\" class=\"headerlink\" title=\"13.1.7 Rewrite压缩\"></a>13.1.7 Rewrite压缩</h4><p>1、是什么：</p>\n<p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p>\n<p>2、重写原理，如何实现重写</p>\n<p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，r<strong>edis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作</strong>。</p>\n<ul>\n<li><p><strong>no-appendfsync-on-rewrite</strong>：</p>\n<ul>\n<li>如果 no-appendfsync-on-rewrite&#x3D;yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</li>\n<li>如果 no-appendfsync-on-rewrite&#x3D;no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</li>\n</ul>\n</li>\n<li><p>触发机制，何时重写</p>\n<ul>\n<li>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</li>\n<li>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。</li>\n</ul>\n</li>\n<li><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p>\n</li>\n<li><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p>\n</li>\n</ul>\n<p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p>\n<ul>\n<li><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p>\n</li>\n<li><p>如果Redis的<strong>AOF当前大小&gt;&#x3D; base_size +base_size*100%</strong> (默认)且当前大小&gt;&#x3D;64mb(默认)的情况下，Redis会对AOF进行重写。</p>\n</li>\n</ul>\n<p>3、重写流程</p>\n<p>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p>\n<p>（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p>\n<p>（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p>\n<p>（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p>\n<p>（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2859c2658ed99debe33627d69f159c6a.png\"></p>\n<h4 id=\"13-1-8-优势\"><a href=\"#13-1-8-优势\" class=\"headerlink\" title=\"13.1.8 优势\"></a>13.1.8 优势</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/c0e5f8e24764e6ec020e0cfc64e72abc.jpeg\"></p>\n<ul>\n<li>备份机制更稳健，丢失数据概率更低。</li>\n<li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li>\n</ul>\n<h4 id=\"13-1-9-劣势\"><a href=\"#13-1-9-劣势\" class=\"headerlink\" title=\"13.1.9 劣势\"></a>13.1.9 劣势</h4><ul>\n<li>比起RDB占用更多的磁盘空间。</li>\n<li>恢复备份速度要慢。</li>\n<li>每次读写都同步的话，有一定的性能压力。</li>\n<li>存在个别Bug，造成恢复不能。</li>\n</ul>\n<h4 id=\"13-1-10-小总结\"><a href=\"#13-1-10-小总结\" class=\"headerlink\" title=\"13.1.10 小总结\"></a>13.1.10 小总结</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ae31e1ae1d95d94aa22c1440f5bf0df2.jpeg\"></p>\n<h3 id=\"13-2-总结-Which-one\"><a href=\"#13-2-总结-Which-one\" class=\"headerlink\" title=\"13.2 总结(Which one)\"></a>13.2 总结(Which one)</h3><h4 id=\"13-2-1-用哪个好\"><a href=\"#13-2-1-用哪个好\" class=\"headerlink\" title=\"13.2.1 用哪个好\"></a>13.2.1 用哪个好</h4><p>官方推荐两个都启用。</p>\n<p>如果对数据不敏感，可以选单独用RDB。</p>\n<p>不建议单独用 AOF，因为可能会出现Bug。</p>\n<p>如果只是做纯内存缓存，可以都不用。</p>\n<h4 id=\"13-2-2-官网建议\"><a href=\"#13-2-2-官网建议\" class=\"headerlink\" title=\"13.2.2 官网建议\"></a>13.2.2 官网建议</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a6426abf936edf8a29f9991c7070376d.jpeg\"></p>\n<ul>\n<li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li>\n<li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.</li>\n<li>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</li>\n<li>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li>\n<li>同时开启两种持久化方式</li>\n<li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li>\n<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？</li>\n<li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li>\n<li>性能建议</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</td>\n</tr>\n<tr>\n<td>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</td>\n</tr>\n<tr>\n<td>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</td>\n</tr>\n<tr>\n<td>默认超过原大小100%大小时重写可以改到适当的数值。</td>\n</tr>\n</tbody></table>\n<h2 id=\"14-Redis-主从复制\"><a href=\"#14-Redis-主从复制\" class=\"headerlink\" title=\"14.Redis_主从复制\"></a>14.Redis_主从复制</h2><h3 id=\"14-1-是什么\"><a href=\"#14-1-是什么\" class=\"headerlink\" title=\"14.1 是什么\"></a>14.1 是什么</h3><p>主机数据更新后根据配置和策略， 自动同步到备机的master&#x2F;slaver机制，<strong>Master以写为主，Slave以读为主</strong></p>\n<h3 id=\"14-2-能干嘛\"><a href=\"#14-2-能干嘛\" class=\"headerlink\" title=\"14.2 能干嘛\"></a>14.2 能干嘛</h3><ul>\n<li>读写分离，性能扩展</li>\n<li>容灾快速恢复</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8f304f8a2d817fcb61025c87362577d6.jpeg\"></p>\n<h3 id=\"14-3-怎么玩：主从复制\"><a href=\"#14-3-怎么玩：主从复制\" class=\"headerlink\" title=\"14.3 怎么玩：主从复制\"></a>14.3 怎么玩：主从复制</h3><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/image-20231125162036427.png\" style=\"zoom:50%;\" />\n\n<p>拷贝多个redis.conf文件include(写绝对路径)</p>\n<p><strong>开启daemonize yes</strong></p>\n<p>Pid文件名字pidfile</p>\n<p>指定端口port</p>\n<p><strong>Log文件名字</strong></p>\n<p>dump.rdb名字dbfilename</p>\n<p><strong>Appendonly 关掉或者换名字</strong></p>\n<h4 id=\"14-3-1-新建redis6379-conf，填写以下内容\"><a href=\"#14-3-1-新建redis6379-conf，填写以下内容\" class=\"headerlink\" title=\"14.3.1 新建redis6379.conf，填写以下内容\"></a>14.3.1 新建redis6379.conf，填写以下内容</h4><p>include &#x2F;myredis&#x2F;redis.conf</p>\n<p>pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid</p>\n<p>port 6379</p>\n<p>dbfilename dump6379.rdb</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/981207f4ac1d995895b2df26a6b1c720.jpeg\"></p>\n<h4 id=\"14-3-2-新建redis6380-conf，填写以下内容\"><a href=\"#14-3-2-新建redis6380-conf，填写以下内容\" class=\"headerlink\" title=\"14.3.2 新建redis6380.conf，填写以下内容\"></a>14.3.2 新建redis6380.conf，填写以下内容</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/8ed1c762a039bfd204b173130a976d2f.jpeg\"></p>\n<h4 id=\"14-3-3-新建redis6381-conf，填写以下内容\"><a href=\"#14-3-3-新建redis6381-conf，填写以下内容\" class=\"headerlink\" title=\"14.3.3 新建redis6381.conf，填写以下内容\"></a>14.3.3 新建redis6381.conf，填写以下内容</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/7c4649b42eb9906bdabe22cab12ed6d9.jpeg\"></p>\n<p>slave-priority 10</p>\n<p>&#x3D;&#x3D;设置从机的优先级，值越小，优先级越高，用于选举主机时使用&#x3D;&#x3D;。默认100</p>\n<h4 id=\"14-3-4-启动三台redis服务器\"><a href=\"#14-3-4-启动三台redis服务器\" class=\"headerlink\" title=\"14.3.4 启动三台redis服务器\"></a>14.3.4 启动三台redis服务器</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f141cf2af239628bcbd6ad7ed0f79582.jpeg\"></p>\n<h4 id=\"14-3-5-查看系统进程，看看三台服务器是否启动\"><a href=\"#14-3-5-查看系统进程，看看三台服务器是否启动\" class=\"headerlink\" title=\"14.3.5 查看系统进程，看看三台服务器是否启动\"></a>14.3.5 查看系统进程，看看三台服务器是否启动</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2e62a9c2b336f74d88e71c9d2a25fb4a.jpeg\"></p>\n<h4 id=\"14-3-6-查看三台主机运行情况\"><a href=\"#14-3-6-查看三台主机运行情况\" class=\"headerlink\" title=\"14.3.6 查看三台主机运行情况\"></a>14.3.6 查看三台主机运行情况</h4><p>info replication</p>\n<p>打印主从复制的相关信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d1244f809454e85212d1e3e8ab3dadb5.jpeg\"></p>\n<h4 id=\"14-3-7-配从-库-不配主-库\"><a href=\"#14-3-7-配从-库-不配主-库\" class=\"headerlink\" title=\"14.3.7 配从(库)不配主(库)\"></a>14.3.7 配从(库)不配主(库)</h4><p>slaveof &lt;ip&gt;&lt;port&gt;</p>\n<p>成为某个实例的从服务器</p>\n<p>1、在6380和6381上执行: slaveof 127.0.0.1 6379</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9faabc65bba02000f557a22c2f7e0389.jpeg\"></p>\n<p>2、在主机上写，在从机上可以读取数据</p>\n<p>在从机上写数据报错</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e48f6b49a782e9ee0bec3fe7c6d5d5b9.jpeg\"></p>\n<p>3、主机挂掉，重启就行，一切如初</p>\n<p>4、从机重启需重设：slaveof 127.0.0.1 6379</p>\n<p>可以将配置增加到文件中。永久生效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/776e7953f93d5deee6aa9c33ec5d6152.jpeg\"></p>\n<h3 id=\"14-4-常用3招\"><a href=\"#14-4-常用3招\" class=\"headerlink\" title=\"14.4 常用3招\"></a>14.4 常用3招</h3><h4 id=\"14-4-1-一主二仆\"><a href=\"#14-4-1-一主二仆\" class=\"headerlink\" title=\"14.4.1 一主二仆\"></a>14.4.1 一主二仆</h4><p>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</p>\n<p>从机是否可以写？set可否？</p>\n<p>主机shutdown后情况如何？从机是上位还是原地待命？</p>\n<p>主机又回来了后，主机新增记录，从机还能否顺利复制？</p>\n<p>其中一台从机down后情况如何？依照原有它能跟上大部队吗？</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/0d7d030a5fe54e7c76f9e862e55681ef.jpeg\"></p>\n<h4 id=\"14-4-2-薪火相传\"><a href=\"#14-4-2-薪火相传\" class=\"headerlink\" title=\"14.4.2 薪火相传\"></a>14.4.2 薪火相传</h4><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p>\n<p>用 slaveof &lt;ip&gt;&lt;port&gt;</p>\n<p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p>\n<p>风险是一旦某个slave宕机，后面的slave都没法备份</p>\n<p>主机挂了，从机还是从机，无法写数据了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/217f4bd0a0bb7e4a21de64bd8e696042.jpeg\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/562908cfced15e65054f50ca776a6a66.jpeg\"></p>\n<h4 id=\"14-4-3-反客为主\"><a href=\"#14-4-3-反客为主\" class=\"headerlink\" title=\"14.4.3 反客为主\"></a>14.4.3 反客为主</h4><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p>\n<p>用 slaveof no one 将从机变为主机。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/0b109b50bc6b912b3bebe79cc4548329.jpeg\"></p>\n<h3 id=\"14-5-复制原理\"><a href=\"#14-5-复制原理\" class=\"headerlink\" title=\"14.5 复制原理\"></a>14.5 复制原理</h3><ul>\n<li><p>Slave启动成功连接到master后会发送一个sync命令</p>\n</li>\n<li><p>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</p>\n</li>\n<li><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>\n</li>\n<li><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</p>\n</li>\n<li><p>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/da55ade9c2f65224eda9584428aee53a.jpeg\"></p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/image-20231125162225003.png\" alt=\"image-20231125162225003\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"14-6-哨兵模式-sentinel\"><a href=\"#14-6-哨兵模式-sentinel\" class=\"headerlink\" title=\"14.6 哨兵模式(sentinel)\"></a>14.6 哨兵模式(sentinel)</h3><h4 id=\"14-6-1-是什么\"><a href=\"#14-6-1-是什么\" class=\"headerlink\" title=\"14.6.1 是什么\"></a>14.6.1 是什么</h4><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d0f16d1e712d26a7dbc30521b2552827.jpeg\"></p>\n<h4 id=\"14-6-2-怎么玩-使用步骤\"><a href=\"#14-6-2-怎么玩-使用步骤\" class=\"headerlink\" title=\"14.6.2  怎么玩(使用步骤)\"></a>14.6.2  怎么玩(使用步骤)</h4><h5 id=\"14-6-2-1-调整为一主二仆模式，6379带着6380、6381\"><a href=\"#14-6-2-1-调整为一主二仆模式，6379带着6380、6381\" class=\"headerlink\" title=\"14.6.2.1 调整为一主二仆模式，6379带着6380、6381\"></a>14.6.2.1 调整为一主二仆模式，6379带着6380、6381</h5><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/12757c4cd18c03f373a9fc1286af60fd.jpeg\"></p>\n<h5 id=\"14-6-2-2-自定义的-myredis目录下新建sentinel-conf文件，名字绝不能错\"><a href=\"#14-6-2-2-自定义的-myredis目录下新建sentinel-conf文件，名字绝不能错\" class=\"headerlink\" title=\"14.6.2.2 自定义的&#x2F;myredis目录下新建sentinel.conf文件，名字绝不能错\"></a>14.6.2.2 自定义的&#x2F;myredis目录下新建sentinel.conf文件，名字绝不能错</h5><h5 id=\"14-6-2-3-配置哨兵-填写内容\"><a href=\"#14-6-2-3-配置哨兵-填写内容\" class=\"headerlink\" title=\"14.6.2.3 配置哨兵,填写内容\"></a>14.6.2.3 配置哨兵,填写内容</h5><p>sentinel monitor mymaster 127.0.0.1 6379 1</p>\n<p><strong>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</strong></p>\n<h5 id=\"14-6-2-4-启动哨兵\"><a href=\"#14-6-2-4-启动哨兵\" class=\"headerlink\" title=\"14.6.2.4 启动哨兵\"></a>14.6.2.4 启动哨兵</h5><p>&#x2F;usr&#x2F;local&#x2F;bin</p>\n<p>redis做压测可以用自带的<strong>redis-benchmark</strong>工具</p>\n<p>执行redis-sentinel &#x2F;myredis&#x2F;sentinel.conf</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a7c8885457e0ef442d87b5323d35fd2d.jpeg\"></p>\n<h5 id=\"14-6-2-5-当主机挂掉，从机选举中产生新的主机\"><a href=\"#14-6-2-5-当主机挂掉，从机选举中产生新的主机\" class=\"headerlink\" title=\"14.6.2.5 当主机挂掉，从机选举中产生新的主机\"></a>14.6.2.5 当主机挂掉，从机选举中产生新的主机</h5><p>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</p>\n<p>哪个从机会被选举为主机呢？根据优先级别：<strong>slave-priority</strong></p>\n<p>原主机重启后会变为从机。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f1b620b71bd124e059e2f8aea62e9817.jpeg\"></p>\n<h5 id=\"14-6-2-6-复制延时\"><a href=\"#14-6-2-6-复制延时\" class=\"headerlink\" title=\"14.6.2.6 复制延时\"></a>14.6.2.6 复制延时</h5><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>\n<h4 id=\"14-6-3-故障恢复\"><a href=\"#14-6-3-故障恢复\" class=\"headerlink\" title=\"14.6.3 故障恢复\"></a>14.6.3 故障恢复</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/7692c3d0a4e0971ce9be13f8fbfcfb8b.jpeg\"></p>\n<p>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</p>\n<p>偏移量是指获得原主机数据最全的</p>\n<p>每个redis实例启动后都会随机生成一个40位的runid</p>\n<h4 id=\"14-6-4-主从复制\"><a href=\"#14-6-4-主从复制\" class=\"headerlink\" title=\"14.6.4 主从复制\"></a>14.6.4 主从复制</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">JedisSentinelPool</span><span style=\"color: #BABED8\"> jedisSentinelPool</span><span style=\"color: #89DDFF\">=null;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getJedisFromSentinel</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedisSentinelPool</span><span style=\"color: #89DDFF\">==null)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> sentinelSet</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashSet</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            sentinelSet</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">192.168.11.103:26379</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">JedisPoolConfig</span><span style=\"color: #BABED8\"> jedisPoolConfig </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">JedisPoolConfig</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setMaxTotal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//最大可用连接数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setMaxIdle</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//最大闲置连接数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setMinIdle</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//最小闲置连接数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setBlockWhenExhausted</span><span style=\"color: #89DDFF\">(true);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//连接耗尽是否等待</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setMaxWaitMillis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2000</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//等待时间</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        jedisPoolConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setTestOnBorrow</span><span style=\"color: #89DDFF\">(true);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//取连接的时候进行一下测试 ping pong</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">jedisSentinelPool</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">JedisSentinelPool</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">mymaster</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">sentinelSet</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">jedisPoolConfig</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> jedisSentinelPool</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getResource</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> jedisSentinelPool</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getResource</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"15-Redis集群\"><a href=\"#15-Redis集群\" class=\"headerlink\" title=\"15.Redis集群\"></a>15.Redis集群</h2><h3 id=\"15-1-问题\"><a href=\"#15-1-问题\" class=\"headerlink\" title=\"15.1 问题\"></a>15.1 问题</h3><p>容量不够，redis如何进行扩容？</p>\n<p>并发写操作， redis如何分摊？</p>\n<p>另外，<strong>主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</strong></p>\n<p>之前通过代理主机来解决，但是<strong>redis3.0</strong>中提供了解决方案。就是&#x3D;&#x3D;无中心化集群&#x3D;&#x3D;配置。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/image-20231125134601422.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"15-2-什么是集群\"><a href=\"#15-2-什么是集群\" class=\"headerlink\" title=\"15.2 什么是集群\"></a>15.2 什么是集群</h3><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1&#x2F;N。</p>\n<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>\n<h3 id=\"15-3-删除持久化数据\"><a href=\"#15-3-删除持久化数据\" class=\"headerlink\" title=\"15.3 删除持久化数据\"></a>15.3 删除持久化数据</h3><p>将rdb,aof文件都删除掉。</p>\n<h3 id=\"15-4-制作6个实例\"><a href=\"#15-4-制作6个实例\" class=\"headerlink\" title=\"15.4 制作6个实例\"></a>15.4 制作6个实例</h3><p>6379,6380,6381,6389,6390,6391</p>\n<h4 id=\"15-4-1-配置基本信息\"><a href=\"#15-4-1-配置基本信息\" class=\"headerlink\" title=\"15.4.1 配置基本信息\"></a>15.4.1 配置基本信息</h4><p>开启daemonize yes</p>\n<p>Pid文件名字</p>\n<p>指定端口</p>\n<p>Log文件名字</p>\n<p>Dump.rdb名字</p>\n<p>Appendonly 关掉或者换名字</p>\n<h4 id=\"15-4-2-redis-cluster配置修改\"><a href=\"#15-4-2-redis-cluster配置修改\" class=\"headerlink\" title=\"15.4.2 redis cluster配置修改\"></a>15.4.2 redis cluster配置修改</h4><p>cluster-enabled yes 打开集群模式</p>\n<p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p>\n<p>cluster-node-timeout 15000 设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/home/bigdata/redis.conf</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">port</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">6379</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">pidfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/var/run/redis_6379.pid</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">dbfilename</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">dump6379.rdb</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">dir</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/home/bigdata/redis_cluster</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">logfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/home/bigdata/redis_cluster/redis_err_6379.log</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">cluster-enabled</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">yes</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">cluster-config-file</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">nodes-6379.conf</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">cluster-node-timeout</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">15000</span></span></code></pre></div><h4 id=\"15-4-3-修改好redis6379-conf文件，拷贝多个redis-conf文件\"><a href=\"#15-4-3-修改好redis6379-conf文件，拷贝多个redis-conf文件\" class=\"headerlink\" title=\"15.4.3 修改好redis6379.conf文件，拷贝多个redis.conf文件\"></a>15.4.3 修改好redis6379.conf文件，拷贝多个redis.conf文件</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/517e60e933f57419ad486c83b041e194.jpeg\"></p>\n<h4 id=\"15-4-4-使用查找替换修改另外5个文件\"><a href=\"#15-4-4-使用查找替换修改另外5个文件\" class=\"headerlink\" title=\"15.4.4 使用查找替换修改另外5个文件\"></a>15.4.4 使用查找替换修改另外5个文件</h4><p>例如：vim中  <code>:%s/6379/6380</code></p>\n<h4 id=\"15-4-5-启动6个redis服务\"><a href=\"#15-4-5-启动6个redis服务\" class=\"headerlink\" title=\"15.4.5 启动6个redis服务\"></a>15.4.5 启动6个redis服务</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/00f21cb2f68da8d7484c6a7d0a1a7325.jpeg\"></p>\n<h3 id=\"15-5-将六个节点合成一个集群\"><a href=\"#15-5-将六个节点合成一个集群\" class=\"headerlink\" title=\"15.5  将六个节点合成一个集群\"></a>15.5  将六个节点合成一个集群</h3><p>组合之前，请<strong>确保所有redis实例启动</strong>后，nodes-xxxx.conf文件都生成正常。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/20f0b3e097fa655a942b8fd4e27a8a25.jpeg\"></p>\n<ul>\n<li>合体：</li>\n</ul>\n<p>cd &#x2F;opt&#x2F;redis-6.2.1&#x2F;src</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">redis-cli</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--cluster</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">create</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--cluster-replicas</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6379</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6380</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6381</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6389</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6390</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">192.168</span><span style=\"color: #C3E88D\">.11.101:6391（设置密码的</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">在这串后面加上</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-a</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">redis密码）</span></span></code></pre></div><p>此处不要用127.0.0.1， 请用&#x3D;&#x3D;真实IP地址&#x3D;&#x3D;</p>\n<p>--replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/f4c0bb6a3b94d3884dc1e9905a989f79.jpeg\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/0041cae310e9a25a3b5f8469590a4c45.jpeg\"></p>\n<ul>\n<li>普通方式登录</li>\n</ul>\n<p>可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ede4d4d40edcd13bccd2b28ada80a6b5.jpeg\"></p>\n<h3 id=\"15-6-c-采用集群策略连接，设置数据会自动切换到相应的写主机\"><a href=\"#15-6-c-采用集群策略连接，设置数据会自动切换到相应的写主机\" class=\"headerlink\" title=\"15.6 -c 采用集群策略连接，设置数据会自动切换到相应的写主机\"></a>15.6 -c 采用集群策略连接，设置数据会自动切换到相应的写主机</h3><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/75061a30ce527b8fa5084b09fe7343ac.jpeg\"></p>\n<h3 id=\"15-7-通过-cluster-nodes-命令查看集群信息\"><a href=\"#15-7-通过-cluster-nodes-命令查看集群信息\" class=\"headerlink\" title=\"15.7 通过 cluster nodes 命令查看集群信息\"></a>15.7 通过 cluster nodes 命令查看集群信息</h3><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/698a74a41da04382c7719b9fd268784d.jpeg\" style=\"zoom:150%;\" />\n\n<h3 id=\"15-8-redis-cluster-如何分配这六个节点\"><a href=\"#15-8-redis-cluster-如何分配这六个节点\" class=\"headerlink\" title=\"15.8 redis cluster 如何分配这六个节点?\"></a>15.8 redis cluster 如何分配这六个节点?</h3><p>一个集群至少要有&#x3D;&#x3D;三个主节点&#x3D;&#x3D;。</p>\n<p>选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p>\n<p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p>\n<h3 id=\"15-9-什么是slots\"><a href=\"#15-9-什么是slots\" class=\"headerlink\" title=\"15.9 什么是slots\"></a>15.9 什么是slots</h3><p>&#96;&#96;<strong>[OK] All nodes agree about slots configuration.</strong></p>\n<p><strong>&gt;&gt;&gt; Check for open slots…</strong></p>\n<p><strong>&gt;&gt;&gt; Check slots coverage…</strong></p>\n<p><strong>[OK] All 16384 slots covered.</strong></p>\n<p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个，</p>\n<p>集群使用&#x3D;&#x3D;公式 CRC16(key) % 16384&#x3D;&#x3D; 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p>\n<p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p>\n<p>节点 A 负责处理 0 号至 5460 号插槽。</p>\n<p>节点 B 负责处理 5461 号至 10922 号插槽。</p>\n<p>节点 C 负责处理 10923 号至 16383 号插槽。</p>\n<h3 id=\"15-10-在集群中录入值\"><a href=\"#15-10-在集群中录入值\" class=\"headerlink\" title=\"15.10 在集群中录入值\"></a>15.10 在集群中录入值</h3><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p>\n<p>redis-cli客户端提供了 <strong>–c 参数实现自动重定向</strong>。</p>\n<p>如 <strong>redis-cli -c –p 6379</strong> 登入后，再录入、查询键值对可以自动重定向。</p>\n<p>不在一个slot下的键值，是<strong>不能使用mget,mset等多键操作</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/377267e67bfabd5435cc1f10409e5ec8.jpeg\"></p>\n<p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3fe587d85e5a85fcb06200f318e55ad1.jpeg\"></p>\n<h3 id=\"15-11-查询集群中的值\"><a href=\"#15-11-查询集群中的值\" class=\"headerlink\" title=\"15.11 查询集群中的值\"></a>15.11 查询集群中的值</h3><p>CLUSTER GETKEYSINSLOT &lt;slot&gt;&lt;count&gt; 返回 count 个 slot 槽中的键。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/110317e763b42f083eb81cecb763fe5e.jpeg\"></p>\n<h3 id=\"15-12-故障恢复\"><a href=\"#15-12-故障恢复\" class=\"headerlink\" title=\"15.12 故障恢复\"></a>15.12 故障恢复</h3><p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15秒超时</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9b3625cfd996c28e6f4e4e897ad1f82f.jpeg\" style=\"zoom:150%;\" />\n\n<p>主节点恢复后，主从关系会如何？主节点回来变成从机。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ff601c8d2c589aeb44b04bfa73cf04e8.jpeg\" style=\"zoom: 150%;\" />\n\n<p>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</p>\n<p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</p>\n<p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。</p>\n<p>redis.conf中的参数 cluster-require-full-coverage</p>\n<h3 id=\"15-13-集群的Jedis开发\"><a href=\"#15-13-集群的Jedis开发\" class=\"headerlink\" title=\"15.13 集群的Jedis开发\"></a>15.13 集群的Jedis开发</h3><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p>\n<p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">JedisClusterTest</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #C792EA\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">HostAndPort</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">set </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashSet</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">HostAndPort</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     set</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">HostAndPort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">192.168.31.211</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">6379</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #C792EA\">JedisCluster</span><span style=\"color: #BABED8\"> jedisCluster</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">JedisCluster</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">set</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     jedisCluster</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">jedisCluster</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">k1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h3 id=\"15-14-Redis-集群提供了以下好处\"><a href=\"#15-14-Redis-集群提供了以下好处\" class=\"headerlink\" title=\"15.14 Redis 集群提供了以下好处\"></a>15.14 Redis 集群提供了以下好处</h3><p>实现扩容</p>\n<p>分摊压力</p>\n<p>无中心配置相对简单</p>\n<h3 id=\"15-15-Redis-集群的不足\"><a href=\"#15-15-Redis-集群的不足\" class=\"headerlink\" title=\"15.15 Redis 集群的不足\"></a>15.15 Redis 集群的不足</h3><p>多键操作是不被支持的</p>\n<p>多键的Redis事务是不被支持的。lua脚本不被支持</p>\n<p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p>\n<h2 id=\"16-Redis应用问题解决\"><a href=\"#16-Redis应用问题解决\" class=\"headerlink\" title=\"16.Redis应用问题解决\"></a>16.Redis应用问题解决</h2><h3 id=\"16-1-缓存穿透\"><a href=\"#16-1-缓存穿透\" class=\"headerlink\" title=\"16.1 缓存穿透\"></a>16.1 缓存穿透</h3><h4 id=\"16-1-1-问题描述\"><a href=\"#16-1-1-问题描述\" class=\"headerlink\" title=\"16.1.1 问题描述\"></a>16.1.1 问题描述</h4><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/0663d66c57e8f39a1ea267ff86ddc6c7.png\"></p>\n<h4 id=\"16-1-2-解决方案\"><a href=\"#16-1-2-解决方案\" class=\"headerlink\" title=\"16.1.2 解决方案\"></a>16.1.2 解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>\n<p>解决方案：</p>\n<ol>\n<li><p><strong>对空值缓存：</strong>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p>\n</li>\n<li><p><strong>设置可访问的名单（白名单）：</strong></p>\n<p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p>\n</li>\n<li><p><strong>采用布隆过滤器</strong>：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p>\n<p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</p>\n<p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p>\n</li>\n<li><p><strong>进行实时监控：</strong>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p>\n</li>\n</ol>\n<h3 id=\"16-2-缓存击穿\"><a href=\"#16-2-缓存击穿\" class=\"headerlink\" title=\"16.2 缓存击穿\"></a>16.2 缓存击穿</h3><h4 id=\"16-2-1-问题描述\"><a href=\"#16-2-1-问题描述\" class=\"headerlink\" title=\"16.2.1 问题描述\"></a>16.2.1 问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/de13019d72aba5386ea859ef10706db1.png\"></p>\n<h4 id=\"16-2-2-解决方案\"><a href=\"#16-2-2-解决方案\" class=\"headerlink\" title=\"16.2.2 解决方案\"></a>16.2.2 解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p>\n<p>解决问题：</p>\n<p><strong>（1）预先设置热门数据：</strong>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p>\n<p><strong>（2）实时调整：</strong>现场监控哪些数据热门，实时调整key的过期时长</p>\n<p><strong>（3）使用锁：</strong></p>\n<ol>\n<li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</li>\n<li>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</li>\n<li>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li>\n<li>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3124f29f7f560b34c47c9d537db70409.png\"></p>\n<h3 id=\"16-3-缓存雪崩\"><a href=\"#16-3-缓存雪崩\" class=\"headerlink\" title=\"16.3 缓存雪崩\"></a>16.3 缓存雪崩</h3><h4 id=\"16-3-1-问题描述\"><a href=\"#16-3-1-问题描述\" class=\"headerlink\" title=\"16.3.1 问题描述\"></a>16.3.1 问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p>\n<ul>\n<li>正常访问</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9e450a80074ae5229a28c7c882c29331.png\" style=\"zoom:67%;\" />\n\n<ul>\n<li>缓存失效瞬间</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/3d06e2905cd0d6a337577f2ef556574e.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"16-3-2-解决方案\"><a href=\"#16-3-2-解决方案\" class=\"headerlink\" title=\"16.3.2 解决方案\"></a>16.3.2 解决方案</h4><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p>\n<p>解决方案：</p>\n<ol>\n<li><p><strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p>\n</li>\n<li><p><strong>使用锁或队列：</strong></p>\n<p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p>\n</li>\n<li><p><strong>设置过期标志更新缓存：</strong></p>\n<p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p>\n</li>\n<li><p><strong>将缓存失效时间分散开：</strong></p>\n<p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n</li>\n</ol>\n<h3 id=\"16-4-分布式锁\"><a href=\"#16-4-分布式锁\" class=\"headerlink\" title=\"16.4 分布式锁\"></a>16.4 分布式锁</h3><h4 id=\"16-4-1-问题描述\"><a href=\"#16-4-1-问题描述\" class=\"headerlink\" title=\"16.4.1 问题描述\"></a>16.4.1 问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<p>1. 基于数据库实现分布式锁</p>\n<p>2. 基于缓存（Redis等）</p>\n<p>3. 基于Zookeeper</p>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<p>1. 性能：redis最高</p>\n<p>2. 可靠性：zookeeper最高</p>\n<p>这里，我们就基于redis实现分布式锁。</p>\n<h4 id=\"16-4-2-解决方案：使用redis实现分布式锁\"><a href=\"#16-4-2-解决方案：使用redis实现分布式锁\" class=\"headerlink\" title=\"16.4.2 解决方案：使用redis实现分布式锁\"></a>16.4.2 解决方案：使用redis实现分布式锁</h4><p>redis:命令</p>\n<p># set sku:1:info “OK” NX PX 10000</p>\n<p>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</p>\n<p>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</p>\n<p>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</p>\n<p>XX ：只在键已经存在时，才对键进行设置操作。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/1472b851b955cd35e63b490e591a3e77.png\"></p>\n<p>1. 多个客户端同时获取锁（setnx）</p>\n<p>2. 获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）</p>\n<p>3. 其他客户端等待重试</p>\n<h4 id=\"16-4-3-编写代码\"><a href=\"#16-4-3-编写代码\" class=\"headerlink\" title=\"16.4.3 编写代码\"></a>16.4.3 编写代码</h4><p>Redis: set num 0</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">GetMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">testLock</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">testLock</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//1获取锁，setne</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Boolean</span><span style=\"color: #BABED8\"> lock </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">setIfAbsent</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">111</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//2获取锁成功、查询num的值</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">lock</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">num</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//2.1判断num为空return</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">StringUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">))&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//2.2有值就转成成int</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> num </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Integer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parseInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//2.3把redis的num加1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">num</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">num</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//2.4释放锁，del</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">delete</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//3获取锁失败、每隔0.1秒再获取</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            Thread</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sleep</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">testLock</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">InterruptedException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">e</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">printStackTrace</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>重启，服务集群，通过网关压力测试：</p>\n<p>ab -n 1000 -c 100 <a href=\"http://192.168.140.1:8080/test/testLock\">http://192.168.140.1:8080/test/testLock</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/6fee9d2f25d646500064958ce34db9cf.png\"></p>\n<p>查看redis中num的值：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/b8ff0937d8af29deebca8f39fece83fe.png\"></p>\n<p>基本实现。</p>\n<p>问题：setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p>\n<p>解决：设置过期时间，自动释放锁。</p>\n<h4 id=\"16-4-4-优化之设置锁的过期时间\"><a href=\"#16-4-4-优化之设置锁的过期时间\" class=\"headerlink\" title=\"16.4.4 优化之设置锁的过期时间\"></a>16.4.4 优化之设置锁的过期时间</h4><p>设置过期时间有两种方式： </p>\n<p>1. 首先想到通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）</p>\n<p>2. 在set时指定过期时间（推荐）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/369ca9b88f708181f5eb75794730125c.png\"></p>\n<p>设置过期时间：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/51ff959f895dd9134c46266c8da1e700.png\"></p>\n<p>压力测试肯定也没有问题。自行测试</p>\n<p>问题：可能会释放其他服务器的锁。</p>\n<p>场景：如果业务逻辑的执行时间是7s。执行流程如下</p>\n<ol>\n<li>index1业务逻辑没执行完，3秒后锁被自动释放。</li>\n<li>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</li>\n<li>index3获取到锁，执行业务逻辑</li>\n<li>index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</li>\n</ol>\n<p>最终等于没锁的情况。</p>\n<p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p>\n<h4 id=\"16-4-5-优化之UUID防误删\"><a href=\"#16-4-5-优化之UUID防误删\" class=\"headerlink\" title=\"16.4.5 优化之UUID防误删\"></a>16.4.5 优化之UUID防误删</h4><p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/65c489f1e9fdd330fadef4200b29356d.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/362ba2787570ca030364dade0dc06a80.png\"></p>\n<p>问题：删除操作缺乏原子性。</p>\n<p>场景：</p>\n<ol>\n<li>index1执行删除时，查询到的lock值确实和uuid相等</li>\n</ol>\n<p>​\t\tuuid&#x3D;v1</p>\n<p>​\t\tset(lock,uuid)；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e98c8f4557db6f7514c201310affad26.png\"></p>\n<ol start=\"2\">\n<li>index1执行删除前，lock刚好过期时间已到，被redis自动释放</li>\n</ol>\n<p>​\t\t在redis中没有了lock，没有了锁。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/32b27ef9b41029d8d8af9a4989817b55.png\"></p>\n<ol start=\"3\">\n<li>index2获取了lock</li>\n</ol>\n<p>​\t\tindex2线程获取到了cpu的资源，开始执行方法</p>\n<p>​\t\tuuid&#x3D;v2</p>\n<p>​\t\tset(lock,uuid)；</p>\n<ol start=\"4\">\n<li>index1执行删除，此时会把index2的lock删除</li>\n</ol>\n<p>​\t\tindex1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/32b27ef9b41029d8d8af9a4989817b55.png\"></p>\n<p>​\t\t删除的index2的锁！</p>\n<h4 id=\"16-4-6-优化之LUA脚本保证删除的原子性\"><a href=\"#16-4-6-优化之LUA脚本保证删除的原子性\" class=\"headerlink\" title=\"16.4.6 优化之LUA脚本保证删除的原子性\"></a>16.4.6 优化之LUA脚本保证删除的原子性</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">GetMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">testLockLua</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">testLockLua</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> uuid </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> skuId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">25</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 访问skuId 为25号的商品 100008348542</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> locKey </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> skuId</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 锁住的是每个商品的数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 3 获取锁</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Boolean</span><span style=\"color: #BABED8\"> lock </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">setIfAbsent</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">locKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> uuid</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> TimeUnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SECONDS</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 第一种： lock 与过期时间中间不写任何的代码。</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// redisTemplate.expire(&quot;lock&quot;,10, TimeUnit.SECONDS);//设置过期时间</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 如果true</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">lock</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 执行的业务逻辑开始</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 获取缓存中的num 数据</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">num</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 如果是空直接返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">StringUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> num </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Integer</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parseInt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 使num 每次+1 放入缓存</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">num</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> String</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">valueOf</span><span style=\"color: #89DDFF\">(++</span><span style=\"color: #BABED8\">num</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #676E95; font-style: italic\">/*使用lua脚本来锁*/</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 定义lua 脚本</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> script </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 使用redis执行lua执行</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">DefaultRedisScript</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> redisScript </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">DefaultRedisScript</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisScript</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setScriptText</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">script</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 设置一下返回值类型 为Long</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 那么返回字符串与0 会有发生错误。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisScript</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setResultType</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Long</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">class</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">execute</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">redisScript</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">asList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">locKey</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\"> uuid</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 其他线程等待</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 睡眠</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            Thread</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sleep</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1000</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 睡醒了之后，调用方法。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">testLockLua</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">InterruptedException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">e</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">printStackTrace</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Lua 脚本详解：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9b675c752b37002543fd1727950c487a.png\"></p>\n<p>项目中正确使用：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//1. 定义key，key应该是为每个sku定义的，也就是每个sku有一把锁。</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> locKey </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">skuId</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 锁住的是每个商品的数据</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Boolean</span><span style=\"color: #BABED8\"> lock </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">setIfAbsent</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">locKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> uuid</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">TimeUnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SECONDS</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/a526c753de3ec8603068b021da05e4cd.png\" style=\"zoom:80%;\" />\n\n<h4 id=\"16-4-7-总结\"><a href=\"#16-4-7-总结\" class=\"headerlink\" title=\"16.4.7 总结\"></a>16.4.7 总结</h4><p>1、加锁</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 1. 从redis中获取锁,set k1 v1 px 20000 nx</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> uuid </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Boolean</span><span style=\"color: #BABED8\"> lock </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">opsForValue</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setIfAbsent</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> uuid</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> TimeUnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SECONDS</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p>2、使用lua释放锁</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 2. 释放锁 del</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> script </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 设置lua脚本返回的数据类型</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">DefaultRedisScript</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> redisScript </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">DefaultRedisScript</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 设置lua脚本返回类型为Long</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">redisScript</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setResultType</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Long</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">class</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">redisScript</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setScriptText</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">script</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">redisTemplate</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">execute</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">redisScript</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">asList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lock</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\">uuid</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p>3、重试</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">Thread</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sleep</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">500</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">testLock</span><span style=\"color: #89DDFF\">();</span></span></code></pre></div><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p>\n<ul>\n<li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p>\n</li>\n<li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p>\n</li>\n<li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p>\n</li>\n<li><p>加锁和解锁必须具有原子性。</p>\n</li>\n</ul>\n<h2 id=\"17-Redis6-0新功能\"><a href=\"#17-Redis6-0新功能\" class=\"headerlink\" title=\"17.Redis6.0新功能\"></a>17.Redis6.0新功能</h2><h3 id=\"17-1-ACL\"><a href=\"#17-1-ACL\" class=\"headerlink\" title=\"17.1 ACL\"></a>17.1 ACL</h3><h4 id=\"17-1-1-简介\"><a href=\"#17-1-1-简介\" class=\"headerlink\" title=\"17.1.1 简介\"></a>17.1.1 简介</h4><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p>\n<p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p>\n<p>（1）接入权限:用户名和密码</p>\n<p>（2）可以执行的命令</p>\n<p>（3）可以操作的 KEY</p>\n<p>参考官网：<a href=\"https://redis.io/topics/acl\">https://redis.io/topics/acl</a></p>\n<h4 id=\"17-1-2-命令\"><a href=\"#17-1-2-命令\" class=\"headerlink\" title=\"17.1.2 命令\"></a>17.1.2 命令</h4><p>1、使用acl list命令展现用户权限列表</p>\n<p>（1）数据说明</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/42794876ce9989819fc483746402ead4.png\"></p>\n<p>2、使用acl cat命令</p>\n<p>（1）查看添加权限指令类别</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/ec2a33352311b9e317fd6d3e3d19468d.png\"></p>\n<p>（2）加参数类型名可以查看类型下具体命令</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/d5e250aa84fe8df7e94d998f9c07c878.png\"></p>\n<p>3、使用acl whoami命令查看当前用户</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/24d92b1b2a51a202c98f6f1fc00bddf7.png\"></p>\n<p>4、使用aclsetuser命令创建和编辑用户ACL</p>\n<p>（1）ACL规则</p>\n<p>下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p>\n<table>\n<thead>\n<tr>\n<th>ACL规则</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型</td>\n<td>参数</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>启动和禁用用户</td>\n<td><strong>on</strong></td>\n<td>激活某用户账号</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>off</strong></td>\n<td>禁用某用户账号。注意，已验证的连接仍然可以工作。如果默认用户被标记为off，则新连接将在未进行身份验证的情况下启动，并要求用户使用AUTH选项发送AUTH或HELLO，以便以某种方式进行身份验证。</td>\n</tr>\n<tr>\n<td>权限的添加删除</td>\n<td><strong>+&lt;command&gt;</strong></td>\n<td>将指令添加到用户可以调用的指令列表中</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>-&lt;command&gt;</strong></td>\n<td>从用户可执行指令列表移除指令</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>+@&lt;category&gt;</strong></td>\n<td>添加该类别中用户要调用的所有指令，有效类别为**@admin、@set、@sortedset…**等，通过调用ACL CAT命令查看完整列表。特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。</td>\n</tr>\n<tr>\n<td></td>\n<td>-@&lt;actegory&gt;</td>\n<td>从用户可调用指令中移除类别</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>allcommands</strong></td>\n<td>+@all的别名</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>nocommand</strong></td>\n<td>-@all的别名</td>\n</tr>\n<tr>\n<td>可操作键的添加或删除</td>\n<td><strong>~&lt;pattern&gt;</strong></td>\n<td>添加可作为用户可操作的键的模式。例如~*允许所有的键</td>\n</tr>\n</tbody></table>\n<p>（2）通过命令创建新用户默认权限</p>\n<p>acl setuser user1</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/2ee62209660be90612d55ace86f41c40.png\"></p>\n<p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p>\n<p>（3）设置有用户名、密码、ACL权限、并启用的用户</p>\n<p>acl setuser user2 on &gt;password ~cached:* +get</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/bfc125b161b86a088d192040887fa23b.png\"></p>\n<p>(4)切换用户，验证权限</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/e726aa7d4e54035a950f5fac55ecb8fe.png\"></p>\n<h3 id=\"17-2-IO多线程\"><a href=\"#17-2-IO多线程\" class=\"headerlink\" title=\"17.2 IO多线程\"></a>17.2 IO多线程</h3><h4 id=\"17-2-1-简介\"><a href=\"#17-2-1-简介\" class=\"headerlink\" title=\"17.2.1 简介\"></a>17.2.1 简介</h4><p>Redis6终于支撑多线程了，告别单线程了吗？</p>\n<p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p>\n<h4 id=\"17-2-2-原理架构\"><a href=\"#17-2-2-原理架构\" class=\"headerlink\" title=\"17.2.2 原理架构\"></a>17.2.2 原理架构</h4><p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/9cc1241626f6e32a3f2b4853f53a1415.png\"></p>\n<p>另外，多线程IO默认也是不开启的，需要再配置文件中配置</p>\n<p>io-threads-do-reads yes</p>\n<p>io-threads 4</p>\n<h3 id=\"17-3-工具支持-Cluster\"><a href=\"#17-3-工具支持-Cluster\" class=\"headerlink\" title=\"17.3 工具支持 Cluster\"></a>17.3 工具支持 Cluster</h3><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/redis/70284d7063be314c8a1cfb80c6ffb07c.png\"></p>\n<h3 id=\"17-4-Redis新功能持续关注\"><a href=\"#17-4-Redis新功能持续关注\" class=\"headerlink\" title=\"17.4 Redis新功能持续关注\"></a>17.4 Redis新功能持续关注</h3><p>Redis6新功能还有：</p>\n<p>1、RESP3新的 Redis 通信协议：优化服务端与客户端之间通信</p>\n<p>2、Client side caching客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。</p>\n<p>3、Proxy集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。</p>\n<p>4、Modules API</p>\n<p>Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</p>\n","feature":true,"text":"框架高级课程系列之Redis6尚硅谷JavaEE教研组 知识： Redis 缓存：数据类型、常用操作、Java 操作 Redis、主从模型搭建、哨兵集群搭建、日...","permalink":"/post/redis","photos":[],"count_time":{"symbolsCount":"55k","symbolsTime":"50 mins."},"categories":[{"name":"数据库","slug":"数据库","count":2,"path":"api/categories/数据库.json"}],"tags":[{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A1%86%E6%9E%B6%E9%AB%98%E7%BA%A7%E8%AF%BE%E7%A8%8B%E7%B3%BB%E5%88%97%E4%B9%8BRedis6\"><span class=\"toc-text\">框架高级课程系列之Redis6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.  NoSQL数据库简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95\"><span class=\"toc-text\">1.1  技术发展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-1-Web1-0%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">1.1.1  Web1.0时代</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-2-Web2-0%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">1.1.2  Web2.0时代</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-3-%E8%A7%A3%E5%86%B3CPU%E5%8F%8A%E5%86%85%E5%AD%98%E5%8E%8B%E5%8A%9B\"><span class=\"toc-text\">1.1.3  解决CPU及内存压力</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-4-%E8%A7%A3%E5%86%B3IO%E5%8E%8B%E5%8A%9B\"><span class=\"toc-text\">1.1.4  解决IO压力</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1.2  NoSQL数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.2.1  NoSQL数据库概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-NoSQL%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1.2.2  NoSQL适用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-NoSQL%E4%B8%8D%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1.2.3  NoSQL不适用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-4-Memcache\"><span class=\"toc-text\">1.2.4  Memcache</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-5-Redis\"><span class=\"toc-text\">1.2.5  Redis</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-6-MongoDB\"><span class=\"toc-text\">1.2.6  MongoDB</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3%EF%BC%89\"><span class=\"toc-text\">1.3  行式存储数据库（大数据时代）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-1-%E8%A1%8C%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1.3.1  行式数据库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-2-%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1.3.2  列式数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-2-1-Hbase\"><span class=\"toc-text\">1.3.2.1  Hbase</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-2-2-Cassandra-k%C9%99%CB%88saendr%C9%99\"><span class=\"toc-text\">1.3.2.2  Cassandra[kəˈsændrə]</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E5%9B%BE%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1.4  图关系型数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-DB-Engines-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8E%92%E5%90%8D\"><span class=\"toc-text\">1.5  DB-Engines 数据库排名</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Redis%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2. Redis概述安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2.1  应用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-%E9%85%8D%E5%90%88%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%9A%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">2.1.1  配合关系型数据库做高速缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-2-%E5%A4%9A%E6%A0%B7%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%98%E5%82%A8%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2.1.2 多样的数据结构存储持久化数据</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Redis%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.2  Redis安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2.2.1  安装版本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">2.2.2 安装步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%EF%BC%9A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84gcc%E7%BC%96%E8%AF%91%E5%99%A8\"><span class=\"toc-text\">2.2.2.1 准备工作：下载安装最新版的gcc编译器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-2-%E4%B8%8B%E8%BD%BDredis-6-2-1-tar-gz%E6%94%BE-opt%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">2.2.2.2 下载redis-6.2.1.tar.gz放&#x2F;opt目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-3-%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%EF%BC%9Atar-zxvf-redis-6-2-1-tar-gz\"><span class=\"toc-text\">2.2.2.3 解压命令：tar -zxvf redis-6.2.1.tar.gz</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-4-%E8%A7%A3%E5%8E%8B%E5%AE%8C%E6%88%90%E5%90%8E%E8%BF%9B%E5%85%A5%E7%9B%AE%E5%BD%95%EF%BC%9Acd-redis-6-2-1\"><span class=\"toc-text\">2.2.2.4 解压完成后进入目录：cd redis-6.2.1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-5-%E5%9C%A8redis-6-2-1%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%86%8D%E6%AC%A1%E6%89%A7%E8%A1%8Cmake%E5%91%BD%E4%BB%A4%EF%BC%88%E5%8F%AA%E6%98%AF%E7%BC%96%E8%AF%91%E5%A5%BD%EF%BC%89\"><span class=\"toc-text\">2.2.2.5 在redis-6.2.1目录下再次执行make命令（只是编译好）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-6-%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%87%86%E5%A4%87%E5%A5%BDC%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%EF%BC%8Cmake-%E4%BC%9A%E6%8A%A5%E9%94%99%E2%80%94Jemalloc-jemalloc-h%EF%BC%9A%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.2.2.6 如果没有准备好C语言编译环境，make 会报错—Jemalloc&#x2F;jemalloc.h：没有那个文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-7-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E8%BF%90%E8%A1%8Cmake-distclean\"><span class=\"toc-text\">2.2.2.7 解决方案：运行make distclean</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-8-%E5%9C%A8redis-6-2-1%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%86%8D%E6%AC%A1%E6%89%A7%E8%A1%8Cmake%E5%91%BD%E4%BB%A4%EF%BC%88%E5%8F%AA%E6%98%AF%E7%BC%96%E8%AF%91%E5%A5%BD%EF%BC%89\"><span class=\"toc-text\">2.2.2.8 在redis-6.2.1目录下再次执行make命令（只是编译好）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-2-9-%E8%B7%B3%E8%BF%87make-test-%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C-make-install\"><span class=\"toc-text\">2.2.2.9 跳过make test 继续执行: make install</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-3-%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%EF%BC%9A-usr-local-bin\"><span class=\"toc-text\">2.2.3 **安装目录：&#x2F;**usr&#x2F;local&#x2F;bin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-4-%E5%89%8D%E5%8F%B0%E5%90%AF%E5%8A%A8%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">2.2.4 前台启动（不推荐）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-5-%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8%EF%BC%88-%E6%8E%A8%E8%8D%90-%EF%BC%89\"><span class=\"toc-text\">2.2.5 后台启动（&#x3D;&#x3D;推荐&#x3D;&#x3D;）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-6-Redis%E4%BB%8B%E7%BB%8D%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">2.2.6 Redis介绍相关知识</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3. 常用五大数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-Redis%E9%94%AE-key\"><span class=\"toc-text\">3.1 Redis键(key)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Redis%E5%AD%97%E7%AC%A6%E4%B8%B2-String\"><span class=\"toc-text\">3.2 Redis字符串(String)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3.2.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.2.2 常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.2.3 数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Redis%E5%88%97%E8%A1%A8-List\"><span class=\"toc-text\">3.3 Redis列表(List)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3.3.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.3.2 常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.3.3 数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-Redis%E9%9B%86%E5%90%88-Set\"><span class=\"toc-text\">3.4 Redis集合(Set)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3.4.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.4.2 常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.4.3 数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-Redis%E5%93%88%E5%B8%8C-Hash\"><span class=\"toc-text\">3.5 Redis哈希(Hash)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3.5.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.5.2 常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.5.3 数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-Redis%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88Zset-sorted-set\"><span class=\"toc-text\">3.6 Redis有序集合Zset(sorted set)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3.6.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.6.2 常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.6.3 数据结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-4-%E8%B7%B3%E8%B7%83%E8%A1%A8%EF%BC%88%E8%B7%B3%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">3.6.4 跳跃表（跳表）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.Redis配置文件介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-Units%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">4.1 Units单位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-INCLUDES%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">4.2 INCLUDES包含</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.3 网络相关配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-1-bind\"><span class=\"toc-text\">4.3.1 bind</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-2-protected-mode\"><span class=\"toc-text\">4.3.2 protected-mode</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-3-Port\"><span class=\"toc-text\">4.3.3 Port</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-4-tcp-backlog\"><span class=\"toc-text\">4.3.4 tcp-backlog</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-5-timeout\"><span class=\"toc-text\">4.3.5 timeout</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-6-tcp-keepalive\"><span class=\"toc-text\">4.3.6 tcp-keepalive</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-GENERAL%E9%80%9A%E7%94%A8\"><span class=\"toc-text\">4.4 GENERAL通用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-1-daemonize\"><span class=\"toc-text\">4.4.1 daemonize</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-2-pidfile\"><span class=\"toc-text\">4.4.2 pidfile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-3-loglevel\"><span class=\"toc-text\">4.4.3 loglevel</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-4-logfile\"><span class=\"toc-text\">4.4.4 logfile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-5-databases-16\"><span class=\"toc-text\">4.4.5 databases 16</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-SECURITY%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">4.5 SECURITY安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-1-%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">4.5.1 设置密码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-LIMITS%E9%99%90%E5%88%B6\"><span class=\"toc-text\">4.6  LIMITS限制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-1-maxclients\"><span class=\"toc-text\">4.6.1 maxclients</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-2-maxmemory\"><span class=\"toc-text\">4.6.2 maxmemory</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-3-maxmemory-policy\"><span class=\"toc-text\">4.6.3 maxmemory-policy</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-4-maxmemory-samples\"><span class=\"toc-text\">4.6.4 maxmemory-samples</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Redis%E7%9A%84%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">5.Redis的发布和订阅</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">5.1 什么是发布和订阅</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-Redis%E7%9A%84%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">5.2 Redis的发布和订阅</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">5.3 发布订阅命令行实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Redis%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">6.Redis新数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-Bitmaps\"><span class=\"toc-text\">6.1 Bitmaps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">6.1.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-2-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6.1.2 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-3-Bitmaps%E4%B8%8Eset%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">6.1.3 Bitmaps与set对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-HyperLogLog\"><span class=\"toc-text\">6.2 HyperLogLog</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">6.2.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-2-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6.2.2 命令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-Geospatial\"><span class=\"toc-text\">6.3 Geospatial</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">6.3.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-2-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6.3.2 命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-Redis-Jedis-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">7.Redis_Jedis_测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-Jedis%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84jar%E5%8C%85\"><span class=\"toc-text\">7.1 Jedis所需要的jar包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E8%BF%9E%E6%8E%A5Redis%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">7.2 连接Redis注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-Jedis%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">7.3 Jedis常用操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-1-%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E7%9A%84%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">7.3.1 创建动态的工程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-2-%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">7.3.2 创建测试程序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">7.4 测试相关数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-1-Jedis-API-Key\"><span class=\"toc-text\">7.4.1 Jedis-API: Key</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-2-Jedis-API-String\"><span class=\"toc-text\">7.4.2 Jedis-API: String</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-3-Jedis-API-List\"><span class=\"toc-text\">7.4.3 Jedis-API: List</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-4-Jedis-API-set\"><span class=\"toc-text\">7.4.4 Jedis-API: set</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-5-Jedis-API-hash\"><span class=\"toc-text\">7.4.5 Jedis-API: hash</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-6-Jedis-API-zset\"><span class=\"toc-text\">7.4.6 Jedis-API: zset</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Redis-Jedis-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">8.Redis_Jedis_实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">8.1 完成一个手机验证码功能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-Redis%E4%B8%8ESpring-Boot%E6%95%B4%E5%90%88\"><span class=\"toc-text\">9.Redis与Spring Boot整合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1-%E6%95%B4%E5%90%88%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">9.1 整合步骤</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-Redis-%E4%BA%8B%E5%8A%A1-%E9%94%81%E6%9C%BA%E5%88%B6-%E7%A7%92%E6%9D%80\"><span class=\"toc-text\">10.Redis_事务_锁机制_秒杀</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-Redis%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">10.1 Redis的事务定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-Multi%E3%80%81Exec%E3%80%81discard\"><span class=\"toc-text\">10.2 Multi、Exec、discard</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3-%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">10.3 事务的错误处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E6%88%90%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">10.4 为什么要做成事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-5-%E4%BA%8B%E5%8A%A1%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">10.5 事务冲突的问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-1-%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">10.5.1 例子</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-2-%E6%82%B2%E8%A7%82%E9%94%81\"><span class=\"toc-text\">10.5.2 悲观锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-3-%E4%B9%90%E8%A7%82%E9%94%81\"><span class=\"toc-text\">10.5.3 乐观锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-4-WATCH-key-key-%E2%80%A6\"><span class=\"toc-text\">10.5.4 WATCH key [key …]</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-5-unwatch\"><span class=\"toc-text\">10.5.5 unwatch</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-6-Redis%E4%BA%8B%E5%8A%A1%E4%B8%89%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">10.6 Redis事务三特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-Redis-%E4%BA%8B%E5%8A%A1-%E7%A7%92%E6%9D%80%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">11.Redis_事务_秒杀案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1-%E8%A7%A3%E5%86%B3%E8%AE%A1%E6%95%B0%E5%99%A8%E5%92%8C%E4%BA%BA%E5%91%98%E8%AE%B0%E5%BD%95%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">11.1 解决计数器和人员记录的事务操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-2-Redis%E4%BA%8B%E5%8A%A1%E2%80%93%E7%A7%92%E6%9D%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">11.2 Redis事务–秒杀并发模拟</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-2-1-%E8%81%94%E7%BD%91%EF%BC%9Ayum-install-httpd-tools\"><span class=\"toc-text\">11.2.1 联网：yum install httpd-tools</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-2-2-%E6%97%A0%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">11.2.2 无网络</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-2-3-%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">11.2.3 测试及结果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#11-2-3-1-%E9%80%9A%E8%BF%87ab%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">11.2.3.1 通过ab测试</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#11-2-3-2-%E8%B6%85%E5%8D%96\"><span class=\"toc-text\">11.2.3.2 超卖</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">11.3 超卖问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-4-%E5%88%A9%E7%94%A8%E4%B9%90%E8%A7%82%E9%94%81%E6%B7%98%E6%B1%B0%E7%94%A8%E6%88%B7%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%E3%80%82\"><span class=\"toc-text\">11.4 利用乐观锁淘汰用户，解决超卖问题。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-5-%E7%BB%A7%E7%BB%AD%E5%A2%9E%E5%8A%A0%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">11.5 继续增加并发测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-5-1-%E8%BF%9E%E6%8E%A5%E6%9C%89%E9%99%90%E5%88%B6\"><span class=\"toc-text\">11.5.1 连接有限制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-5-2-%E5%B7%B2%E7%BB%8F%E7%A7%92%E5%85%89%EF%BC%8C%E5%8F%AF%E6%98%AF%E8%BF%98%E6%9C%89%E5%BA%93%E5%AD%98\"><span class=\"toc-text\">11.5.2 已经秒光，可是还有库存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-5-3-%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%EF%BC%8C%E9%80%9A%E8%BF%87%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">11.5.3 连接超时，通过连接池解决</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-5-4-%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">11.5.4 连接池</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-6-%E8%A7%A3%E5%86%B3%E5%BA%93%E5%AD%98%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">11.6 解决库存遗留问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-6-1-LUA%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">11.6.1 LUA脚本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-6-2-LUA%E8%84%9A%E6%9C%AC%E5%9C%A8Redis%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">11.6.2 LUA脚本在Redis中的优势</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-7-Redis-%E4%BA%8B%E5%8A%A1-%E7%A7%92%E6%9D%80%E6%A1%88%E4%BE%8B-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">11.7 Redis_事务_秒杀案例_代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-7-1-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">11.7.1 项目结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-7-2-%E7%AC%AC%E4%B8%80%E7%89%88%EF%BC%9A%E7%AE%80%E5%8D%95%E7%89%88\"><span class=\"toc-text\">11.7.2 第一版：简单版</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-7-3-%E7%AC%AC%E4%BA%8C%E7%89%88%EF%BC%9A%E5%8A%A0%E4%BA%8B%E5%8A%A1-%E4%B9%90%E8%A7%82%E9%94%81-%E8%A7%A3%E5%86%B3%E8%B6%85%E5%8D%96-%E4%BD%86%E5%87%BA%E7%8E%B0%E9%81%97%E7%95%99%E5%BA%93%E5%AD%98%E5%92%8C%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">11.7.3 第二版：加事务-乐观锁(解决超卖),但出现遗留库存和连接超时</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-7-4-%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%9A%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%A7%A3%E5%86%B3%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">11.7.4 第三版：连接池解决超时问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-7-5-%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%BA%93%E5%AD%98%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%EF%BC%8CLUA%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">11.7.5 第四版：解决库存依赖问题，LUA脚本</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-Redis%E6%8C%81%E4%B9%85%E5%8C%96%E4%B9%8BRDB\"><span class=\"toc-text\">12.Redis持久化之RDB</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1-%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">12.1 总体介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2-RDB%EF%BC%88Redis-DataBase%EF%BC%89\"><span class=\"toc-text\">12.2 RDB（Redis DataBase）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-1-%E5%AE%98%E7%BD%91%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">12.2.1 官网介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-2-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">12.2.2 是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-3-%E5%A4%87%E4%BB%BD%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84\"><span class=\"toc-text\">12.2.3 备份是如何执行的</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-4-Fork\"><span class=\"toc-text\">12.2.4 Fork</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-5-RDB%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">12.2.5 RDB持久化流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-6-dump-rdb%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">12.2.6 dump.rdb文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-7-%E9%85%8D%E7%BD%AE%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">12.2.7 配置位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-8-%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91RDB%E5%BF%AB%E7%85%A7%EF%BC%9B%E4%BF%9D%E6%8C%81%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">12.2.8 如何触发RDB快照；保持策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-1-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E9%BB%98%E8%AE%A4%E7%9A%84%E5%BF%AB%E7%85%A7%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">12.2.8.1 配置文件中默认的快照配置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-2-%E5%91%BD%E4%BB%A4save-VS-bgsave\"><span class=\"toc-text\">12.2.8.2 命令save VS bgsave</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-3-flushall%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">12.2.8.3 flushall命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-4-SNAPSHOTTING%E5%BF%AB%E7%85%A7\"><span class=\"toc-text\">12.2.8.4 SNAPSHOTTING快照</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-5-Save\"><span class=\"toc-text\">12.2.8.5 Save</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-6-stop-writes-on-bgsave-error\"><span class=\"toc-text\">12.2.8.6 stop-writes-on-bgsave-error</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-7-rdbcompression-%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">12.2.8.7 rdbcompression 压缩文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-8-rdbchecksum-%E6%A3%80%E6%9F%A5%E5%AE%8C%E6%95%B4%E6%80%A7\"><span class=\"toc-text\">12.2.8.8 rdbchecksum 检查完整性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-2-8-9-rdb%E7%9A%84%E5%A4%87%E4%BB%BD\"><span class=\"toc-text\">12.2.8.9 rdb的备份</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-9-%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">12.2.9 优势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-10-%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">12.2.10 劣势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-11-%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2\"><span class=\"toc-text\">12.2.11 如何停止</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-12-%E5%B0%8F%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">12.2.12 小总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-Redis%E6%8C%81%E4%B9%85%E5%8C%96%E4%B9%8BAOF\"><span class=\"toc-text\">13.Redis持久化之AOF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-1-AOF%EF%BC%88Append-Only-File%EF%BC%89\"><span class=\"toc-text\">13.1 AOF（Append Only File）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-1-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">13.1.1 是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-2-AOF%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">13.1.2 AOF持久化流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-3-AOF%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%BC%80%E5%90%AF\"><span class=\"toc-text\">13.1.3 AOF默认不开启</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-4-AOF%E5%92%8CRDB%E5%90%8C%E6%97%B6%E5%BC%80%E5%90%AF%EF%BC%8Credis%E5%90%AC%E8%B0%81%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">13.1.4 AOF和RDB同时开启，redis听谁的？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-5-AOF%E5%90%AF%E5%8A%A8-%E4%BF%AE%E5%A4%8D-%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">13.1.5 AOF启动&#x2F;修复&#x2F;恢复</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-6-AOF%E5%90%8C%E6%AD%A5%E9%A2%91%E7%8E%87%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">13.1.6 AOF同步频率设置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-7-Rewrite%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">13.1.7 Rewrite压缩</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-8-%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">13.1.8 优势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-9-%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">13.1.9 劣势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-10-%E5%B0%8F%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">13.1.10 小总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-2-%E6%80%BB%E7%BB%93-Which-one\"><span class=\"toc-text\">13.2 总结(Which one)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-2-1-%E7%94%A8%E5%93%AA%E4%B8%AA%E5%A5%BD\"><span class=\"toc-text\">13.2.1 用哪个好</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-2-2-%E5%AE%98%E7%BD%91%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">13.2.2 官网建议</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">14.Redis_主从复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">14.1 是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-2-%E8%83%BD%E5%B9%B2%E5%98%9B\"><span class=\"toc-text\">14.2 能干嘛</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-3-%E6%80%8E%E4%B9%88%E7%8E%A9%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">14.3 怎么玩：主从复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-1-%E6%96%B0%E5%BB%BAredis6379-conf%EF%BC%8C%E5%A1%AB%E5%86%99%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">14.3.1 新建redis6379.conf，填写以下内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-2-%E6%96%B0%E5%BB%BAredis6380-conf%EF%BC%8C%E5%A1%AB%E5%86%99%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">14.3.2 新建redis6380.conf，填写以下内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-3-%E6%96%B0%E5%BB%BAredis6381-conf%EF%BC%8C%E5%A1%AB%E5%86%99%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">14.3.3 新建redis6381.conf，填写以下内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-4-%E5%90%AF%E5%8A%A8%E4%B8%89%E5%8F%B0redis%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">14.3.4 启动三台redis服务器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-5-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%9C%8B%E7%9C%8B%E4%B8%89%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">14.3.5 查看系统进程，看看三台服务器是否启动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-6-%E6%9F%A5%E7%9C%8B%E4%B8%89%E5%8F%B0%E4%B8%BB%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5\"><span class=\"toc-text\">14.3.6 查看三台主机运行情况</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-3-7-%E9%85%8D%E4%BB%8E-%E5%BA%93-%E4%B8%8D%E9%85%8D%E4%B8%BB-%E5%BA%93\"><span class=\"toc-text\">14.3.7 配从(库)不配主(库)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-4-%E5%B8%B8%E7%94%A83%E6%8B%9B\"><span class=\"toc-text\">14.4 常用3招</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-4-1-%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%86\"><span class=\"toc-text\">14.4.1 一主二仆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-4-2-%E8%96%AA%E7%81%AB%E7%9B%B8%E4%BC%A0\"><span class=\"toc-text\">14.4.2 薪火相传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-4-3-%E5%8F%8D%E5%AE%A2%E4%B8%BA%E4%B8%BB\"><span class=\"toc-text\">14.4.3 反客为主</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-5-%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">14.5 复制原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-6-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F-sentinel\"><span class=\"toc-text\">14.6 哨兵模式(sentinel)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-6-1-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">14.6.1 是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-6-2-%E6%80%8E%E4%B9%88%E7%8E%A9-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">14.6.2  怎么玩(使用步骤)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-1-%E8%B0%83%E6%95%B4%E4%B8%BA%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%86%E6%A8%A1%E5%BC%8F%EF%BC%8C6379%E5%B8%A6%E7%9D%806380%E3%80%816381\"><span class=\"toc-text\">14.6.2.1 调整为一主二仆模式，6379带着6380、6381</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-myredis%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%96%B0%E5%BB%BAsentinel-conf%E6%96%87%E4%BB%B6%EF%BC%8C%E5%90%8D%E5%AD%97%E7%BB%9D%E4%B8%8D%E8%83%BD%E9%94%99\"><span class=\"toc-text\">14.6.2.2 自定义的&#x2F;myredis目录下新建sentinel.conf文件，名字绝不能错</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-3-%E9%85%8D%E7%BD%AE%E5%93%A8%E5%85%B5-%E5%A1%AB%E5%86%99%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">14.6.2.3 配置哨兵,填写内容</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-4-%E5%90%AF%E5%8A%A8%E5%93%A8%E5%85%B5\"><span class=\"toc-text\">14.6.2.4 启动哨兵</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-5-%E5%BD%93%E4%B8%BB%E6%9C%BA%E6%8C%82%E6%8E%89%EF%BC%8C%E4%BB%8E%E6%9C%BA%E9%80%89%E4%B8%BE%E4%B8%AD%E4%BA%A7%E7%94%9F%E6%96%B0%E7%9A%84%E4%B8%BB%E6%9C%BA\"><span class=\"toc-text\">14.6.2.5 当主机挂掉，从机选举中产生新的主机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#14-6-2-6-%E5%A4%8D%E5%88%B6%E5%BB%B6%E6%97%B6\"><span class=\"toc-text\">14.6.2.6 复制延时</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-6-3-%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">14.6.3 故障恢复</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-6-4-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">14.6.4 主从复制</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-Redis%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">15.Redis集群</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-1-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">15.1 问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">15.2 什么是集群</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-3-%E5%88%A0%E9%99%A4%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">15.3 删除持久化数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-4-%E5%88%B6%E4%BD%9C6%E4%B8%AA%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">15.4 制作6个实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#15-4-1-%E9%85%8D%E7%BD%AE%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">15.4.1 配置基本信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#15-4-2-redis-cluster%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">15.4.2 redis cluster配置修改</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#15-4-3-%E4%BF%AE%E6%94%B9%E5%A5%BDredis6379-conf%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8B%B7%E8%B4%9D%E5%A4%9A%E4%B8%AAredis-conf%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">15.4.3 修改好redis6379.conf文件，拷贝多个redis.conf文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#15-4-4-%E4%BD%BF%E7%94%A8%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2%E4%BF%AE%E6%94%B9%E5%8F%A6%E5%A4%965%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">15.4.4 使用查找替换修改另外5个文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#15-4-5-%E5%90%AF%E5%8A%A86%E4%B8%AAredis%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">15.4.5 启动6个redis服务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-5-%E5%B0%86%E5%85%AD%E4%B8%AA%E8%8A%82%E7%82%B9%E5%90%88%E6%88%90%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">15.5  将六个节点合成一个集群</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-6-c-%E9%87%87%E7%94%A8%E9%9B%86%E7%BE%A4%E7%AD%96%E7%95%A5%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E5%86%99%E4%B8%BB%E6%9C%BA\"><span class=\"toc-text\">15.6 -c 采用集群策略连接，设置数据会自动切换到相应的写主机</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-7-%E9%80%9A%E8%BF%87-cluster-nodes-%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">15.7 通过 cluster nodes 命令查看集群信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-8-redis-cluster-%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8D%E8%BF%99%E5%85%AD%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">15.8 redis cluster 如何分配这六个节点?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-9-%E4%BB%80%E4%B9%88%E6%98%AFslots\"><span class=\"toc-text\">15.9 什么是slots</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-10-%E5%9C%A8%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%BD%95%E5%85%A5%E5%80%BC\"><span class=\"toc-text\">15.10 在集群中录入值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-11-%E6%9F%A5%E8%AF%A2%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">15.11 查询集群中的值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-12-%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">15.12 故障恢复</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-13-%E9%9B%86%E7%BE%A4%E7%9A%84Jedis%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">15.13 集群的Jedis开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-14-Redis-%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BE%9B%E4%BA%86%E4%BB%A5%E4%B8%8B%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">15.14 Redis 集群提供了以下好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-15-Redis-%E9%9B%86%E7%BE%A4%E7%9A%84%E4%B8%8D%E8%B6%B3\"><span class=\"toc-text\">15.15 Redis 集群的不足</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-Redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">16.Redis应用问题解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-1-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">16.1 缓存穿透</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-1-1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">16.1.1 问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-1-2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">16.1.2 解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-2-%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF\"><span class=\"toc-text\">16.2 缓存击穿</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-2-1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">16.2.1 问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-2-2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">16.2.2 解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-3-%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9\"><span class=\"toc-text\">16.3 缓存雪崩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-3-1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">16.3.1 问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-3-2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">16.3.2 解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-4-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">16.4 分布式锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">16.4.1 问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E4%BD%BF%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">16.4.2 解决方案：使用redis实现分布式锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-3-%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">16.4.3 编写代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-4-%E4%BC%98%E5%8C%96%E4%B9%8B%E8%AE%BE%E7%BD%AE%E9%94%81%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">16.4.4 优化之设置锁的过期时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-5-%E4%BC%98%E5%8C%96%E4%B9%8BUUID%E9%98%B2%E8%AF%AF%E5%88%A0\"><span class=\"toc-text\">16.4.5 优化之UUID防误删</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-6-%E4%BC%98%E5%8C%96%E4%B9%8BLUA%E8%84%9A%E6%9C%AC%E4%BF%9D%E8%AF%81%E5%88%A0%E9%99%A4%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7\"><span class=\"toc-text\">16.4.6 优化之LUA脚本保证删除的原子性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#16-4-7-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">16.4.7 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-Redis6-0%E6%96%B0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">17.Redis6.0新功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-1-ACL\"><span class=\"toc-text\">17.1 ACL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#17-1-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">17.1.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#17-1-2-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">17.1.2 命令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-IO%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">17.2 IO多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#17-2-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">17.2.1 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#17-2-2-%E5%8E%9F%E7%90%86%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">17.2.2 原理架构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-3-%E5%B7%A5%E5%85%B7%E6%94%AF%E6%8C%81-Cluster\"><span class=\"toc-text\">17.3 工具支持 Cluster</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-4-Redis%E6%96%B0%E5%8A%9F%E8%83%BD%E6%8C%81%E7%BB%AD%E5%85%B3%E6%B3%A8\"><span class=\"toc-text\">17.4 Redis新功能持续关注</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChenZheng","slug":"chenzheng","avatar":"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/avatar.jpg","link":"https://github.com/sjwusj","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Course_One","uid":"5a1ccb7a3b378c198f799b77c2f30086","slug":"Course-One","date":"2024-04-20T11:56:02.000Z","updated":"2024-04-20T14:02:16.522Z","comments":true,"path":"api/articles/Course-One.json","keywords":null,"cover":"image/cover3.jpg","text":"安卓实训第一天...","permalink":"/post/Course-One","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"安卓","slug":"安卓","count":1,"path":"api/categories/安卓.json"}],"tags":[{"name":"Android","slug":"Android","count":1,"path":"api/tags/Android.json"}],"author":{"name":"ChenZheng","slug":"chenzheng","avatar":"https://cdn.jsdelivr.net/gh/sjwusj/imgbed@main/img/avatar.jpg","link":"https://github.com/sjwusj","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"wsl日常问题","uid":"d551f4002780a83035b4f2b326041598","slug":"wsl日常问题","date":"2023-11-06T14:18:00.000Z","updated":"2023-11-08T09:33:02.873Z","comments":true,"path":"api/articles/wsl日常问题.json","keywords":null,"cover":"image/cover2.jpg","text":"系统：Ubuntu-20.04 平台：WSL2 wsl2平台启用ssh服务：sudo &#x2F;etc&#x2F;init.d&#x2F;ssh start ...","permalink":"/post/wsl日常问题","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"Wsl","slug":"Wsl","count":1,"path":"api/tags/Wsl.json"}],"author":{"name":"ChenZheng","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"幼稚园的小朋友の快乐小屋","socials":{"github":"https://github.com/sjwusj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"feature":true}}